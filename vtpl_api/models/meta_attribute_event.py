# coding: utf-8

"""
    Engine api

    Engine APIs  # noqa: E501

    OpenAPI spec version: 1.0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetaAttributeEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'int',
        'estimated_height': 'int',
        'top_type': 'str',
        'top_color': 'str',
        'bottom_type': 'str',
        'bottom_color': 'str',
        'sex': 'str',
        'presence_of_bag': 'bool',
        'type_of_bag': 'str',
        'clothing_pattern': 'str',
        'presence_of_heade_dress': 'bool',
        'type_of_head_dress': 'str',
        'associated_object': 'str',
        'presence_of_long_sleeve': 'bool',
        'vehicle_type': 'str',
        'vehicle_color': 'str',
        'event_time': 'int',
        'channel_id': 'int',
        'app_id': 'int',
        'track_id': 'int',
        'unique_event_id': 'str'
    }

    attribute_map = {
        'object_type': 'objectType',
        'estimated_height': 'estimatedHeight',
        'top_type': 'topType',
        'top_color': 'topColor',
        'bottom_type': 'bottomType',
        'bottom_color': 'bottomColor',
        'sex': 'sex',
        'presence_of_bag': 'presenceOfBag',
        'type_of_bag': 'typeOfBag',
        'clothing_pattern': 'clothingPattern',
        'presence_of_heade_dress': 'presenceOfHeadeDress',
        'type_of_head_dress': 'typeOfHeadDress',
        'associated_object': 'associatedObject',
        'presence_of_long_sleeve': 'presenceOfLongSleeve',
        'vehicle_type': 'vehicleType',
        'vehicle_color': 'vehicleColor',
        'event_time': 'eventTime',
        'channel_id': 'channelId',
        'app_id': 'appId',
        'track_id': 'trackId',
        'unique_event_id': 'uniqueEventId'
    }

    def __init__(self, object_type=1, estimated_height=0, top_type=None, top_color=None, bottom_type=None, bottom_color=None, sex=None, presence_of_bag=None, type_of_bag=None, clothing_pattern=None, presence_of_heade_dress=None, type_of_head_dress=None, associated_object=None, presence_of_long_sleeve=None, vehicle_type=None, vehicle_color=None, event_time=None, channel_id=None, app_id=None, track_id=None, unique_event_id=None):  # noqa: E501
        """MetaAttributeEvent - a model defined in Swagger"""  # noqa: E501
        self._object_type = None
        self._estimated_height = None
        self._top_type = None
        self._top_color = None
        self._bottom_type = None
        self._bottom_color = None
        self._sex = None
        self._presence_of_bag = None
        self._type_of_bag = None
        self._clothing_pattern = None
        self._presence_of_heade_dress = None
        self._type_of_head_dress = None
        self._associated_object = None
        self._presence_of_long_sleeve = None
        self._vehicle_type = None
        self._vehicle_color = None
        self._event_time = None
        self._channel_id = None
        self._app_id = None
        self._track_id = None
        self._unique_event_id = None
        self.discriminator = None
        if object_type is not None:
            self.object_type = object_type
        if estimated_height is not None:
            self.estimated_height = estimated_height
        if top_type is not None:
            self.top_type = top_type
        if top_color is not None:
            self.top_color = top_color
        if bottom_type is not None:
            self.bottom_type = bottom_type
        if bottom_color is not None:
            self.bottom_color = bottom_color
        if sex is not None:
            self.sex = sex
        if presence_of_bag is not None:
            self.presence_of_bag = presence_of_bag
        if type_of_bag is not None:
            self.type_of_bag = type_of_bag
        if clothing_pattern is not None:
            self.clothing_pattern = clothing_pattern
        if presence_of_heade_dress is not None:
            self.presence_of_heade_dress = presence_of_heade_dress
        if type_of_head_dress is not None:
            self.type_of_head_dress = type_of_head_dress
        if associated_object is not None:
            self.associated_object = associated_object
        if presence_of_long_sleeve is not None:
            self.presence_of_long_sleeve = presence_of_long_sleeve
        if vehicle_type is not None:
            self.vehicle_type = vehicle_type
        if vehicle_color is not None:
            self.vehicle_color = vehicle_color
        if event_time is not None:
            self.event_time = event_time
        if channel_id is not None:
            self.channel_id = channel_id
        if app_id is not None:
            self.app_id = app_id
        if track_id is not None:
            self.track_id = track_id
        if unique_event_id is not None:
            self.unique_event_id = unique_event_id

    @property
    def object_type(self):
        """Gets the object_type of this MetaAttributeEvent.  # noqa: E501

        0 - Undefined 1 - Human, 2 - Vehicle, 3 - Animal  # noqa: E501

        :return: The object_type of this MetaAttributeEvent.  # noqa: E501
        :rtype: int
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this MetaAttributeEvent.

        0 - Undefined 1 - Human, 2 - Vehicle, 3 - Animal  # noqa: E501

        :param object_type: The object_type of this MetaAttributeEvent.  # noqa: E501
        :type: int
        """

        self._object_type = object_type

    @property
    def estimated_height(self):
        """Gets the estimated_height of this MetaAttributeEvent.  # noqa: E501


        :return: The estimated_height of this MetaAttributeEvent.  # noqa: E501
        :rtype: int
        """
        return self._estimated_height

    @estimated_height.setter
    def estimated_height(self, estimated_height):
        """Sets the estimated_height of this MetaAttributeEvent.


        :param estimated_height: The estimated_height of this MetaAttributeEvent.  # noqa: E501
        :type: int
        """

        self._estimated_height = estimated_height

    @property
    def top_type(self):
        """Gets the top_type of this MetaAttributeEvent.  # noqa: E501


        :return: The top_type of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._top_type

    @top_type.setter
    def top_type(self, top_type):
        """Sets the top_type of this MetaAttributeEvent.


        :param top_type: The top_type of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._top_type = top_type

    @property
    def top_color(self):
        """Gets the top_color of this MetaAttributeEvent.  # noqa: E501


        :return: The top_color of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._top_color

    @top_color.setter
    def top_color(self, top_color):
        """Sets the top_color of this MetaAttributeEvent.


        :param top_color: The top_color of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._top_color = top_color

    @property
    def bottom_type(self):
        """Gets the bottom_type of this MetaAttributeEvent.  # noqa: E501


        :return: The bottom_type of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._bottom_type

    @bottom_type.setter
    def bottom_type(self, bottom_type):
        """Sets the bottom_type of this MetaAttributeEvent.


        :param bottom_type: The bottom_type of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._bottom_type = bottom_type

    @property
    def bottom_color(self):
        """Gets the bottom_color of this MetaAttributeEvent.  # noqa: E501


        :return: The bottom_color of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._bottom_color

    @bottom_color.setter
    def bottom_color(self, bottom_color):
        """Sets the bottom_color of this MetaAttributeEvent.


        :param bottom_color: The bottom_color of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._bottom_color = bottom_color

    @property
    def sex(self):
        """Gets the sex of this MetaAttributeEvent.  # noqa: E501


        :return: The sex of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this MetaAttributeEvent.


        :param sex: The sex of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._sex = sex

    @property
    def presence_of_bag(self):
        """Gets the presence_of_bag of this MetaAttributeEvent.  # noqa: E501


        :return: The presence_of_bag of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._presence_of_bag

    @presence_of_bag.setter
    def presence_of_bag(self, presence_of_bag):
        """Sets the presence_of_bag of this MetaAttributeEvent.


        :param presence_of_bag: The presence_of_bag of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._presence_of_bag = presence_of_bag

    @property
    def type_of_bag(self):
        """Gets the type_of_bag of this MetaAttributeEvent.  # noqa: E501


        :return: The type_of_bag of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._type_of_bag

    @type_of_bag.setter
    def type_of_bag(self, type_of_bag):
        """Sets the type_of_bag of this MetaAttributeEvent.


        :param type_of_bag: The type_of_bag of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._type_of_bag = type_of_bag

    @property
    def clothing_pattern(self):
        """Gets the clothing_pattern of this MetaAttributeEvent.  # noqa: E501


        :return: The clothing_pattern of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._clothing_pattern

    @clothing_pattern.setter
    def clothing_pattern(self, clothing_pattern):
        """Sets the clothing_pattern of this MetaAttributeEvent.


        :param clothing_pattern: The clothing_pattern of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._clothing_pattern = clothing_pattern

    @property
    def presence_of_heade_dress(self):
        """Gets the presence_of_heade_dress of this MetaAttributeEvent.  # noqa: E501


        :return: The presence_of_heade_dress of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._presence_of_heade_dress

    @presence_of_heade_dress.setter
    def presence_of_heade_dress(self, presence_of_heade_dress):
        """Sets the presence_of_heade_dress of this MetaAttributeEvent.


        :param presence_of_heade_dress: The presence_of_heade_dress of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._presence_of_heade_dress = presence_of_heade_dress

    @property
    def type_of_head_dress(self):
        """Gets the type_of_head_dress of this MetaAttributeEvent.  # noqa: E501


        :return: The type_of_head_dress of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._type_of_head_dress

    @type_of_head_dress.setter
    def type_of_head_dress(self, type_of_head_dress):
        """Sets the type_of_head_dress of this MetaAttributeEvent.


        :param type_of_head_dress: The type_of_head_dress of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._type_of_head_dress = type_of_head_dress

    @property
    def associated_object(self):
        """Gets the associated_object of this MetaAttributeEvent.  # noqa: E501


        :return: The associated_object of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._associated_object

    @associated_object.setter
    def associated_object(self, associated_object):
        """Sets the associated_object of this MetaAttributeEvent.


        :param associated_object: The associated_object of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._associated_object = associated_object

    @property
    def presence_of_long_sleeve(self):
        """Gets the presence_of_long_sleeve of this MetaAttributeEvent.  # noqa: E501


        :return: The presence_of_long_sleeve of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._presence_of_long_sleeve

    @presence_of_long_sleeve.setter
    def presence_of_long_sleeve(self, presence_of_long_sleeve):
        """Sets the presence_of_long_sleeve of this MetaAttributeEvent.


        :param presence_of_long_sleeve: The presence_of_long_sleeve of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._presence_of_long_sleeve = presence_of_long_sleeve

    @property
    def vehicle_type(self):
        """Gets the vehicle_type of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_type of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_type

    @vehicle_type.setter
    def vehicle_type(self, vehicle_type):
        """Sets the vehicle_type of this MetaAttributeEvent.


        :param vehicle_type: The vehicle_type of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._vehicle_type = vehicle_type

    @property
    def vehicle_color(self):
        """Gets the vehicle_color of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_color of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_color

    @vehicle_color.setter
    def vehicle_color(self, vehicle_color):
        """Sets the vehicle_color of this MetaAttributeEvent.


        :param vehicle_color: The vehicle_color of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._vehicle_color = vehicle_color

    @property
    def event_time(self):
        """Gets the event_time of this MetaAttributeEvent.  # noqa: E501


        :return: The event_time of this MetaAttributeEvent.  # noqa: E501
        :rtype: int
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this MetaAttributeEvent.


        :param event_time: The event_time of this MetaAttributeEvent.  # noqa: E501
        :type: int
        """

        self._event_time = event_time

    @property
    def channel_id(self):
        """Gets the channel_id of this MetaAttributeEvent.  # noqa: E501


        :return: The channel_id of this MetaAttributeEvent.  # noqa: E501
        :rtype: int
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this MetaAttributeEvent.


        :param channel_id: The channel_id of this MetaAttributeEvent.  # noqa: E501
        :type: int
        """

        self._channel_id = channel_id

    @property
    def app_id(self):
        """Gets the app_id of this MetaAttributeEvent.  # noqa: E501


        :return: The app_id of this MetaAttributeEvent.  # noqa: E501
        :rtype: int
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this MetaAttributeEvent.


        :param app_id: The app_id of this MetaAttributeEvent.  # noqa: E501
        :type: int
        """

        self._app_id = app_id

    @property
    def track_id(self):
        """Gets the track_id of this MetaAttributeEvent.  # noqa: E501


        :return: The track_id of this MetaAttributeEvent.  # noqa: E501
        :rtype: int
        """
        return self._track_id

    @track_id.setter
    def track_id(self, track_id):
        """Sets the track_id of this MetaAttributeEvent.


        :param track_id: The track_id of this MetaAttributeEvent.  # noqa: E501
        :type: int
        """

        self._track_id = track_id

    @property
    def unique_event_id(self):
        """Gets the unique_event_id of this MetaAttributeEvent.  # noqa: E501


        :return: The unique_event_id of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._unique_event_id

    @unique_event_id.setter
    def unique_event_id(self, unique_event_id):
        """Sets the unique_event_id of this MetaAttributeEvent.


        :param unique_event_id: The unique_event_id of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._unique_event_id = unique_event_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetaAttributeEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaAttributeEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
