# coding: utf-8

"""
    Engine api

    Engine APIs  # noqa: E501

    OpenAPI spec version: 1.0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VtplVideoFrame(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel_id': 'int',
        'app_id': 'int',
        'frame_id': 'int',
        'time_stamp': 'int',
        'fps': 'float',
        'frame': 'object',
        'is_first_frame': 'bool',
        'is_end_of_stream': 'bool',
        'type': 'SourceType',
        'base_url': 'str',
        'user': 'str',
        '_pass': 'str'
    }

    attribute_map = {
        'channel_id': 'channelId',
        'app_id': 'appId',
        'frame_id': 'frameId',
        'time_stamp': 'timeStamp',
        'fps': 'fps',
        'frame': 'frame',
        'is_first_frame': 'isFirstFrame',
        'is_end_of_stream': 'isEndOfStream',
        'type': 'type',
        'base_url': 'baseUrl',
        'user': 'user',
        '_pass': 'pass'
    }

    def __init__(self, channel_id=None, app_id=None, frame_id=None, time_stamp=None, fps=None, frame=None, is_first_frame=False, is_end_of_stream=False, type=None, base_url=None, user=None, _pass=None):  # noqa: E501
        """VtplVideoFrame - a model defined in Swagger"""  # noqa: E501
        self._channel_id = None
        self._app_id = None
        self._frame_id = None
        self._time_stamp = None
        self._fps = None
        self._frame = None
        self._is_first_frame = None
        self._is_end_of_stream = None
        self._type = None
        self._base_url = None
        self._user = None
        self.__pass = None
        self.discriminator = None
        if channel_id is not None:
            self.channel_id = channel_id
        if app_id is not None:
            self.app_id = app_id
        if frame_id is not None:
            self.frame_id = frame_id
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if fps is not None:
            self.fps = fps
        if frame is not None:
            self.frame = frame
        if is_first_frame is not None:
            self.is_first_frame = is_first_frame
        if is_end_of_stream is not None:
            self.is_end_of_stream = is_end_of_stream
        if type is not None:
            self.type = type
        if base_url is not None:
            self.base_url = base_url
        if user is not None:
            self.user = user
        if _pass is not None:
            self._pass = _pass

    @property
    def channel_id(self):
        """Gets the channel_id of this VtplVideoFrame.  # noqa: E501


        :return: The channel_id of this VtplVideoFrame.  # noqa: E501
        :rtype: int
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this VtplVideoFrame.


        :param channel_id: The channel_id of this VtplVideoFrame.  # noqa: E501
        :type: int
        """

        self._channel_id = channel_id

    @property
    def app_id(self):
        """Gets the app_id of this VtplVideoFrame.  # noqa: E501


        :return: The app_id of this VtplVideoFrame.  # noqa: E501
        :rtype: int
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this VtplVideoFrame.


        :param app_id: The app_id of this VtplVideoFrame.  # noqa: E501
        :type: int
        """

        self._app_id = app_id

    @property
    def frame_id(self):
        """Gets the frame_id of this VtplVideoFrame.  # noqa: E501


        :return: The frame_id of this VtplVideoFrame.  # noqa: E501
        :rtype: int
        """
        return self._frame_id

    @frame_id.setter
    def frame_id(self, frame_id):
        """Sets the frame_id of this VtplVideoFrame.


        :param frame_id: The frame_id of this VtplVideoFrame.  # noqa: E501
        :type: int
        """

        self._frame_id = frame_id

    @property
    def time_stamp(self):
        """Gets the time_stamp of this VtplVideoFrame.  # noqa: E501


        :return: The time_stamp of this VtplVideoFrame.  # noqa: E501
        :rtype: int
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this VtplVideoFrame.


        :param time_stamp: The time_stamp of this VtplVideoFrame.  # noqa: E501
        :type: int
        """

        self._time_stamp = time_stamp

    @property
    def fps(self):
        """Gets the fps of this VtplVideoFrame.  # noqa: E501


        :return: The fps of this VtplVideoFrame.  # noqa: E501
        :rtype: float
        """
        return self._fps

    @fps.setter
    def fps(self, fps):
        """Sets the fps of this VtplVideoFrame.


        :param fps: The fps of this VtplVideoFrame.  # noqa: E501
        :type: float
        """

        self._fps = fps

    @property
    def frame(self):
        """Gets the frame of this VtplVideoFrame.  # noqa: E501


        :return: The frame of this VtplVideoFrame.  # noqa: E501
        :rtype: object
        """
        return self._frame

    @frame.setter
    def frame(self, frame):
        """Sets the frame of this VtplVideoFrame.


        :param frame: The frame of this VtplVideoFrame.  # noqa: E501
        :type: object
        """

        self._frame = frame

    @property
    def is_first_frame(self):
        """Gets the is_first_frame of this VtplVideoFrame.  # noqa: E501


        :return: The is_first_frame of this VtplVideoFrame.  # noqa: E501
        :rtype: bool
        """
        return self._is_first_frame

    @is_first_frame.setter
    def is_first_frame(self, is_first_frame):
        """Sets the is_first_frame of this VtplVideoFrame.


        :param is_first_frame: The is_first_frame of this VtplVideoFrame.  # noqa: E501
        :type: bool
        """

        self._is_first_frame = is_first_frame

    @property
    def is_end_of_stream(self):
        """Gets the is_end_of_stream of this VtplVideoFrame.  # noqa: E501


        :return: The is_end_of_stream of this VtplVideoFrame.  # noqa: E501
        :rtype: bool
        """
        return self._is_end_of_stream

    @is_end_of_stream.setter
    def is_end_of_stream(self, is_end_of_stream):
        """Sets the is_end_of_stream of this VtplVideoFrame.


        :param is_end_of_stream: The is_end_of_stream of this VtplVideoFrame.  # noqa: E501
        :type: bool
        """

        self._is_end_of_stream = is_end_of_stream

    @property
    def type(self):
        """Gets the type of this VtplVideoFrame.  # noqa: E501


        :return: The type of this VtplVideoFrame.  # noqa: E501
        :rtype: SourceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VtplVideoFrame.


        :param type: The type of this VtplVideoFrame.  # noqa: E501
        :type: SourceType
        """

        self._type = type

    @property
    def base_url(self):
        """Gets the base_url of this VtplVideoFrame.  # noqa: E501


        :return: The base_url of this VtplVideoFrame.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this VtplVideoFrame.


        :param base_url: The base_url of this VtplVideoFrame.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def user(self):
        """Gets the user of this VtplVideoFrame.  # noqa: E501


        :return: The user of this VtplVideoFrame.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this VtplVideoFrame.


        :param user: The user of this VtplVideoFrame.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def _pass(self):
        """Gets the _pass of this VtplVideoFrame.  # noqa: E501


        :return: The _pass of this VtplVideoFrame.  # noqa: E501
        :rtype: str
        """
        return self.__pass

    @_pass.setter
    def _pass(self, _pass):
        """Sets the _pass of this VtplVideoFrame.


        :param _pass: The _pass of this VtplVideoFrame.  # noqa: E501
        :type: str
        """

        self.__pass = _pass

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VtplVideoFrame, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VtplVideoFrame):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
