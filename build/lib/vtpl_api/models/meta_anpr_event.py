# coding: utf-8

"""
    Engine api

    Engine APIs  # noqa: E501

    OpenAPI spec version: 1.0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetaAnprEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vehicle_number': 'str',
        'vehicle_type': 'VehicleType',
        'vehicle_color': 'Color',
        'vehicle_make': 'str',
        'vehicle_model': 'str',
        'count_of_vehicle': 'int',
        'count_of_two_wheeler': 'int',
        'count_of_helmet': 'int',
        'count_of_no_helmet': 'int',
        'count_of_triple_ride': 'int'
    }

    attribute_map = {
        'vehicle_number': 'vehicleNumber',
        'vehicle_type': 'vehicleType',
        'vehicle_color': 'vehicleColor',
        'vehicle_make': 'vehicleMake',
        'vehicle_model': 'vehicleModel',
        'count_of_vehicle': 'countOfVehicle',
        'count_of_two_wheeler': 'countOfTwoWheeler',
        'count_of_helmet': 'countOfHelmet',
        'count_of_no_helmet': 'countOfNoHelmet',
        'count_of_triple_ride': 'countOfTripleRide'
    }

    def __init__(self, vehicle_number=None, vehicle_type=None, vehicle_color=None, vehicle_make=None, vehicle_model=None, count_of_vehicle=0, count_of_two_wheeler=0, count_of_helmet=0, count_of_no_helmet=0, count_of_triple_ride=0):  # noqa: E501
        """MetaAnprEvent - a model defined in Swagger"""  # noqa: E501
        self._vehicle_number = None
        self._vehicle_type = None
        self._vehicle_color = None
        self._vehicle_make = None
        self._vehicle_model = None
        self._count_of_vehicle = None
        self._count_of_two_wheeler = None
        self._count_of_helmet = None
        self._count_of_no_helmet = None
        self._count_of_triple_ride = None
        self.discriminator = None
        if vehicle_number is not None:
            self.vehicle_number = vehicle_number
        if vehicle_type is not None:
            self.vehicle_type = vehicle_type
        if vehicle_color is not None:
            self.vehicle_color = vehicle_color
        if vehicle_make is not None:
            self.vehicle_make = vehicle_make
        if vehicle_model is not None:
            self.vehicle_model = vehicle_model
        if count_of_vehicle is not None:
            self.count_of_vehicle = count_of_vehicle
        if count_of_two_wheeler is not None:
            self.count_of_two_wheeler = count_of_two_wheeler
        if count_of_helmet is not None:
            self.count_of_helmet = count_of_helmet
        if count_of_no_helmet is not None:
            self.count_of_no_helmet = count_of_no_helmet
        if count_of_triple_ride is not None:
            self.count_of_triple_ride = count_of_triple_ride

    @property
    def vehicle_number(self):
        """Gets the vehicle_number of this MetaAnprEvent.  # noqa: E501

        Vehicle number detected in OCR  # noqa: E501

        :return: The vehicle_number of this MetaAnprEvent.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_number

    @vehicle_number.setter
    def vehicle_number(self, vehicle_number):
        """Sets the vehicle_number of this MetaAnprEvent.

        Vehicle number detected in OCR  # noqa: E501

        :param vehicle_number: The vehicle_number of this MetaAnprEvent.  # noqa: E501
        :type: str
        """

        self._vehicle_number = vehicle_number

    @property
    def vehicle_type(self):
        """Gets the vehicle_type of this MetaAnprEvent.  # noqa: E501


        :return: The vehicle_type of this MetaAnprEvent.  # noqa: E501
        :rtype: VehicleType
        """
        return self._vehicle_type

    @vehicle_type.setter
    def vehicle_type(self, vehicle_type):
        """Sets the vehicle_type of this MetaAnprEvent.


        :param vehicle_type: The vehicle_type of this MetaAnprEvent.  # noqa: E501
        :type: VehicleType
        """

        self._vehicle_type = vehicle_type

    @property
    def vehicle_color(self):
        """Gets the vehicle_color of this MetaAnprEvent.  # noqa: E501


        :return: The vehicle_color of this MetaAnprEvent.  # noqa: E501
        :rtype: Color
        """
        return self._vehicle_color

    @vehicle_color.setter
    def vehicle_color(self, vehicle_color):
        """Sets the vehicle_color of this MetaAnprEvent.


        :param vehicle_color: The vehicle_color of this MetaAnprEvent.  # noqa: E501
        :type: Color
        """

        self._vehicle_color = vehicle_color

    @property
    def vehicle_make(self):
        """Gets the vehicle_make of this MetaAnprEvent.  # noqa: E501


        :return: The vehicle_make of this MetaAnprEvent.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_make

    @vehicle_make.setter
    def vehicle_make(self, vehicle_make):
        """Sets the vehicle_make of this MetaAnprEvent.


        :param vehicle_make: The vehicle_make of this MetaAnprEvent.  # noqa: E501
        :type: str
        """

        self._vehicle_make = vehicle_make

    @property
    def vehicle_model(self):
        """Gets the vehicle_model of this MetaAnprEvent.  # noqa: E501


        :return: The vehicle_model of this MetaAnprEvent.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_model

    @vehicle_model.setter
    def vehicle_model(self, vehicle_model):
        """Sets the vehicle_model of this MetaAnprEvent.


        :param vehicle_model: The vehicle_model of this MetaAnprEvent.  # noqa: E501
        :type: str
        """

        self._vehicle_model = vehicle_model

    @property
    def count_of_vehicle(self):
        """Gets the count_of_vehicle of this MetaAnprEvent.  # noqa: E501


        :return: The count_of_vehicle of this MetaAnprEvent.  # noqa: E501
        :rtype: int
        """
        return self._count_of_vehicle

    @count_of_vehicle.setter
    def count_of_vehicle(self, count_of_vehicle):
        """Sets the count_of_vehicle of this MetaAnprEvent.


        :param count_of_vehicle: The count_of_vehicle of this MetaAnprEvent.  # noqa: E501
        :type: int
        """

        self._count_of_vehicle = count_of_vehicle

    @property
    def count_of_two_wheeler(self):
        """Gets the count_of_two_wheeler of this MetaAnprEvent.  # noqa: E501


        :return: The count_of_two_wheeler of this MetaAnprEvent.  # noqa: E501
        :rtype: int
        """
        return self._count_of_two_wheeler

    @count_of_two_wheeler.setter
    def count_of_two_wheeler(self, count_of_two_wheeler):
        """Sets the count_of_two_wheeler of this MetaAnprEvent.


        :param count_of_two_wheeler: The count_of_two_wheeler of this MetaAnprEvent.  # noqa: E501
        :type: int
        """

        self._count_of_two_wheeler = count_of_two_wheeler

    @property
    def count_of_helmet(self):
        """Gets the count_of_helmet of this MetaAnprEvent.  # noqa: E501


        :return: The count_of_helmet of this MetaAnprEvent.  # noqa: E501
        :rtype: int
        """
        return self._count_of_helmet

    @count_of_helmet.setter
    def count_of_helmet(self, count_of_helmet):
        """Sets the count_of_helmet of this MetaAnprEvent.


        :param count_of_helmet: The count_of_helmet of this MetaAnprEvent.  # noqa: E501
        :type: int
        """

        self._count_of_helmet = count_of_helmet

    @property
    def count_of_no_helmet(self):
        """Gets the count_of_no_helmet of this MetaAnprEvent.  # noqa: E501


        :return: The count_of_no_helmet of this MetaAnprEvent.  # noqa: E501
        :rtype: int
        """
        return self._count_of_no_helmet

    @count_of_no_helmet.setter
    def count_of_no_helmet(self, count_of_no_helmet):
        """Sets the count_of_no_helmet of this MetaAnprEvent.


        :param count_of_no_helmet: The count_of_no_helmet of this MetaAnprEvent.  # noqa: E501
        :type: int
        """

        self._count_of_no_helmet = count_of_no_helmet

    @property
    def count_of_triple_ride(self):
        """Gets the count_of_triple_ride of this MetaAnprEvent.  # noqa: E501


        :return: The count_of_triple_ride of this MetaAnprEvent.  # noqa: E501
        :rtype: int
        """
        return self._count_of_triple_ride

    @count_of_triple_ride.setter
    def count_of_triple_ride(self, count_of_triple_ride):
        """Sets the count_of_triple_ride of this MetaAnprEvent.


        :param count_of_triple_ride: The count_of_triple_ride of this MetaAnprEvent.  # noqa: E501
        :type: int
        """

        self._count_of_triple_ride = count_of_triple_ride

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetaAnprEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaAnprEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
