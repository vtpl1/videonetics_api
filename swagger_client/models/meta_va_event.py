# coding: utf-8

"""
    Engine api

    Engine APIs  # noqa: E501

    OpenAPI spec version: 1.0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetaVaEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'count': 'int',
        'obj_count': 'int',
        'zone_id': 'int',
        'line_id': 'int',
        'entry_count': 'int',
        'exit_count': 'int',
        'count_type': 'LineType'
    }

    attribute_map = {
        'identifier': 'identifier',
        'count': 'count',
        'obj_count': 'objCount',
        'zone_id': 'zoneId',
        'line_id': 'lineId',
        'entry_count': 'entryCount',
        'exit_count': 'exitCount',
        'count_type': 'countType'
    }

    def __init__(self, identifier=None, count=None, obj_count=None, zone_id=None, line_id=None, entry_count=None, exit_count=None, count_type=None):  # noqa: E501
        """MetaVaEvent - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._count = None
        self._obj_count = None
        self._zone_id = None
        self._line_id = None
        self._entry_count = None
        self._exit_count = None
        self._count_type = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if count is not None:
            self.count = count
        if obj_count is not None:
            self.obj_count = obj_count
        if zone_id is not None:
            self.zone_id = zone_id
        if line_id is not None:
            self.line_id = line_id
        if entry_count is not None:
            self.entry_count = entry_count
        if exit_count is not None:
            self.exit_count = exit_count
        if count_type is not None:
            self.count_type = count_type

    @property
    def identifier(self):
        """Gets the identifier of this MetaVaEvent.  # noqa: E501


        :return: The identifier of this MetaVaEvent.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this MetaVaEvent.


        :param identifier: The identifier of this MetaVaEvent.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def count(self):
        """Gets the count of this MetaVaEvent.  # noqa: E501


        :return: The count of this MetaVaEvent.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this MetaVaEvent.


        :param count: The count of this MetaVaEvent.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def obj_count(self):
        """Gets the obj_count of this MetaVaEvent.  # noqa: E501


        :return: The obj_count of this MetaVaEvent.  # noqa: E501
        :rtype: int
        """
        return self._obj_count

    @obj_count.setter
    def obj_count(self, obj_count):
        """Sets the obj_count of this MetaVaEvent.


        :param obj_count: The obj_count of this MetaVaEvent.  # noqa: E501
        :type: int
        """

        self._obj_count = obj_count

    @property
    def zone_id(self):
        """Gets the zone_id of this MetaVaEvent.  # noqa: E501


        :return: The zone_id of this MetaVaEvent.  # noqa: E501
        :rtype: int
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this MetaVaEvent.


        :param zone_id: The zone_id of this MetaVaEvent.  # noqa: E501
        :type: int
        """

        self._zone_id = zone_id

    @property
    def line_id(self):
        """Gets the line_id of this MetaVaEvent.  # noqa: E501


        :return: The line_id of this MetaVaEvent.  # noqa: E501
        :rtype: int
        """
        return self._line_id

    @line_id.setter
    def line_id(self, line_id):
        """Sets the line_id of this MetaVaEvent.


        :param line_id: The line_id of this MetaVaEvent.  # noqa: E501
        :type: int
        """

        self._line_id = line_id

    @property
    def entry_count(self):
        """Gets the entry_count of this MetaVaEvent.  # noqa: E501


        :return: The entry_count of this MetaVaEvent.  # noqa: E501
        :rtype: int
        """
        return self._entry_count

    @entry_count.setter
    def entry_count(self, entry_count):
        """Sets the entry_count of this MetaVaEvent.


        :param entry_count: The entry_count of this MetaVaEvent.  # noqa: E501
        :type: int
        """

        self._entry_count = entry_count

    @property
    def exit_count(self):
        """Gets the exit_count of this MetaVaEvent.  # noqa: E501


        :return: The exit_count of this MetaVaEvent.  # noqa: E501
        :rtype: int
        """
        return self._exit_count

    @exit_count.setter
    def exit_count(self, exit_count):
        """Sets the exit_count of this MetaVaEvent.


        :param exit_count: The exit_count of this MetaVaEvent.  # noqa: E501
        :type: int
        """

        self._exit_count = exit_count

    @property
    def count_type(self):
        """Gets the count_type of this MetaVaEvent.  # noqa: E501


        :return: The count_type of this MetaVaEvent.  # noqa: E501
        :rtype: LineType
        """
        return self._count_type

    @count_type.setter
    def count_type(self, count_type):
        """Sets the count_type of this MetaVaEvent.


        :param count_type: The count_type of this MetaVaEvent.  # noqa: E501
        :type: LineType
        """

        self._count_type = count_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetaVaEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaVaEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
