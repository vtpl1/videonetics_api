# coding: utf-8

"""
    Engine api

    Engine APIs  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrecisEngineTaskStatusProgress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'percentage': 'float',
        'message': 'str',
        'start_time_stamp': 'int',
        'end_time_stamp': 'int',
        'frame_number': 'int',
        'live_url': 'str'
    }

    attribute_map = {
        'percentage': 'percentage',
        'message': 'message',
        'start_time_stamp': 'startTimeStamp',
        'end_time_stamp': 'endTimeStamp',
        'frame_number': 'frameNumber',
        'live_url': 'liveUrl'
    }

    def __init__(self, percentage=0, message=None, start_time_stamp=None, end_time_stamp=None, frame_number=None, live_url=None):  # noqa: E501
        """PrecisEngineTaskStatusProgress - a model defined in Swagger"""  # noqa: E501
        self._percentage = None
        self._message = None
        self._start_time_stamp = None
        self._end_time_stamp = None
        self._frame_number = None
        self._live_url = None
        self.discriminator = None
        if percentage is not None:
            self.percentage = percentage
        if message is not None:
            self.message = message
        if start_time_stamp is not None:
            self.start_time_stamp = start_time_stamp
        if end_time_stamp is not None:
            self.end_time_stamp = end_time_stamp
        if frame_number is not None:
            self.frame_number = frame_number
        if live_url is not None:
            self.live_url = live_url

    @property
    def percentage(self):
        """Gets the percentage of this PrecisEngineTaskStatusProgress.  # noqa: E501

        Percentage of complition  # noqa: E501

        :return: The percentage of this PrecisEngineTaskStatusProgress.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this PrecisEngineTaskStatusProgress.

        Percentage of complition  # noqa: E501

        :param percentage: The percentage of this PrecisEngineTaskStatusProgress.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def message(self):
        """Gets the message of this PrecisEngineTaskStatusProgress.  # noqa: E501

        Percentage of complition  # noqa: E501

        :return: The message of this PrecisEngineTaskStatusProgress.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PrecisEngineTaskStatusProgress.

        Percentage of complition  # noqa: E501

        :param message: The message of this PrecisEngineTaskStatusProgress.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def start_time_stamp(self):
        """Gets the start_time_stamp of this PrecisEngineTaskStatusProgress.  # noqa: E501

        EngineTask processing start time  # noqa: E501

        :return: The start_time_stamp of this PrecisEngineTaskStatusProgress.  # noqa: E501
        :rtype: int
        """
        return self._start_time_stamp

    @start_time_stamp.setter
    def start_time_stamp(self, start_time_stamp):
        """Sets the start_time_stamp of this PrecisEngineTaskStatusProgress.

        EngineTask processing start time  # noqa: E501

        :param start_time_stamp: The start_time_stamp of this PrecisEngineTaskStatusProgress.  # noqa: E501
        :type: int
        """

        self._start_time_stamp = start_time_stamp

    @property
    def end_time_stamp(self):
        """Gets the end_time_stamp of this PrecisEngineTaskStatusProgress.  # noqa: E501

        EngineTask processing end time  # noqa: E501

        :return: The end_time_stamp of this PrecisEngineTaskStatusProgress.  # noqa: E501
        :rtype: int
        """
        return self._end_time_stamp

    @end_time_stamp.setter
    def end_time_stamp(self, end_time_stamp):
        """Sets the end_time_stamp of this PrecisEngineTaskStatusProgress.

        EngineTask processing end time  # noqa: E501

        :param end_time_stamp: The end_time_stamp of this PrecisEngineTaskStatusProgress.  # noqa: E501
        :type: int
        """

        self._end_time_stamp = end_time_stamp

    @property
    def frame_number(self):
        """Gets the frame_number of this PrecisEngineTaskStatusProgress.  # noqa: E501


        :return: The frame_number of this PrecisEngineTaskStatusProgress.  # noqa: E501
        :rtype: int
        """
        return self._frame_number

    @frame_number.setter
    def frame_number(self, frame_number):
        """Sets the frame_number of this PrecisEngineTaskStatusProgress.


        :param frame_number: The frame_number of this PrecisEngineTaskStatusProgress.  # noqa: E501
        :type: int
        """

        self._frame_number = frame_number

    @property
    def live_url(self):
        """Gets the live_url of this PrecisEngineTaskStatusProgress.  # noqa: E501


        :return: The live_url of this PrecisEngineTaskStatusProgress.  # noqa: E501
        :rtype: str
        """
        return self._live_url

    @live_url.setter
    def live_url(self, live_url):
        """Sets the live_url of this PrecisEngineTaskStatusProgress.


        :param live_url: The live_url of this PrecisEngineTaskStatusProgress.  # noqa: E501
        :type: str
        """

        self._live_url = live_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrecisEngineTaskStatusProgress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrecisEngineTaskStatusProgress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
