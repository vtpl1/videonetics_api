# coding: utf-8

"""
    Engine api

    Engine APIs  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetaAttributeEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_type': 'int',
        'obj_type_conf': 'float',
        'obj_type_validated': 'bool',
        'estimated_height': 'int',
        'top_type': 'str',
        'top_type_conf': 'float',
        'top_type_validated': 'bool',
        'top_color': 'str',
        'top_color_conf': 'float',
        'top_color_validated': 'bool',
        'bottom_type': 'str',
        'bottom_type_conf': 'float',
        'bottom_type_validated': 'bool',
        'bottom_color': 'str',
        'bottom_color_conf': 'float',
        'bottom_colore_validated': 'bool',
        'sex': 'str',
        'gender_conf': 'float',
        'gender_validated': 'bool',
        'presence_of_bag': 'bool',
        'presence_of_bag_conf': 'float',
        'presence_of_bag_validated': 'bool',
        'type_of_bag': 'str',
        'type_of_bag_conf': 'float',
        'type_of_bag_validated': 'bool',
        'clothing_pattern': 'str',
        'clothing_pattern_conf': 'float',
        'clothing_pattern_validated': 'bool',
        'presence_of_heade_dress': 'bool',
        'presence_of_heade_dress_conf': 'float',
        'presence_of_heade_dress_validated': 'bool',
        'type_of_head_dress': 'str',
        'type_of_head_dress_conf': 'float',
        'type_of_head_dress_validated': 'bool',
        'associated_object': 'str',
        'associated_object_conf': 'float',
        'associated_object_validated': 'bool',
        'presence_of_long_sleeve': 'bool',
        'presence_of_long_sleeve_conf': 'float',
        'presence_of_long_sleeve_validated': 'bool',
        'vehicle_type': 'str',
        'vehicle_type_conf': 'float',
        'vehicle_type_validated': 'bool',
        'vehicle_color': 'str',
        'vehicle_color_conf': 'float',
        'vehicle_color_validated': 'bool',
        'vehicle_make': 'str',
        'vehicle_make_conf': 'float',
        'vehicle_make_validated': 'bool',
        'vehicle_model': 'str',
        'vehicle_model_conf': 'float',
        'vehicle_model_validated': 'bool',
        'car_type': 'str',
        'car_type_conf': 'float',
        'car_type_validated': 'bool',
        'age': 'str',
        'age_conf': 'float',
        'age_validated': 'bool',
        'hair_length': 'str',
        'hair_length_conf': 'float',
        'hair_length_validated': 'bool',
        'hair_colour': 'str',
        'hair_colour_conf': 'float',
        'hair_colour_validated': 'bool',
        'wear_glass': 'str',
        'wear_glass_conf': 'float',
        'wear_glass_validated': 'bool',
        'posture': 'str',
        'posture_conf': 'float',
        'posture_validated': 'bool',
        'bottom_length_type': 'str',
        'bottom_length_type_conf': 'float',
        'bottom_length_type_validated': 'bool',
        'head_dress_type': 'str',
        'head_dress_type_conf': 'float',
        'head_dress_type_validated': 'bool',
        'head_dress_colour': 'str',
        'head_dress_colour_conf': 'float',
        'head_dress_colour_validated': 'bool',
        'wears_mask': 'str',
        'wears_mask_conf': 'float',
        'wears_mask_validated': 'bool',
        'mask_colour': 'str',
        'mask_colour_conf': 'float',
        'mask_colour_validated': 'bool',
        'bag_colour': 'str',
        'bag_colour_conf': 'float',
        'bag_colour_validated': 'bool',
        'bag_style': 'str',
        'bag_style_conf': 'float',
        'bag_style_validated': 'bool',
        'face_recognised_person_id1': 'str',
        'face_recognised_person_name1': 'str',
        'face_recognised_person_id1_conf': 'float',
        'face_recognised_person_id1_validated': 'bool',
        'face_recognised_person_id2': 'str',
        'face_recognised_person_name2': 'str',
        'face_recognised_person_id2_conf': 'float',
        'face_recognised_person_id2_validated': 'bool',
        'vehicle_license_number': 'str',
        'vehicle_license_number_conf': 'float',
        'vehicle_license_number_validated': 'bool',
        'vehicle_quality_factor': 'float',
        'human_quality_factor': 'float',
        'event_time': 'int',
        'channel_id': 'int',
        'app_id': 'int',
        'track_id': 'int',
        'unique_event_id': 'str'
    }

    attribute_map = {
        'object_type': 'objectType',
        'obj_type_conf': 'objTypeConf',
        'obj_type_validated': 'objTypeValidated',
        'estimated_height': 'estimatedHeight',
        'top_type': 'topType',
        'top_type_conf': 'topTypeConf',
        'top_type_validated': 'topTypeValidated',
        'top_color': 'topColor',
        'top_color_conf': 'topColorConf',
        'top_color_validated': 'topColorValidated',
        'bottom_type': 'bottomType',
        'bottom_type_conf': 'bottomTypeConf',
        'bottom_type_validated': 'bottomTypeValidated',
        'bottom_color': 'bottomColor',
        'bottom_color_conf': 'bottomColorConf',
        'bottom_colore_validated': 'bottomColoreValidated',
        'sex': 'sex',
        'gender_conf': 'genderConf',
        'gender_validated': 'genderValidated',
        'presence_of_bag': 'presenceOfBag',
        'presence_of_bag_conf': 'presenceOfBagConf',
        'presence_of_bag_validated': 'presenceOfBagValidated',
        'type_of_bag': 'typeOfBag',
        'type_of_bag_conf': 'typeOfBagConf',
        'type_of_bag_validated': 'typeOfBagValidated',
        'clothing_pattern': 'clothingPattern',
        'clothing_pattern_conf': 'clothingPatternConf',
        'clothing_pattern_validated': 'clothingPatternValidated',
        'presence_of_heade_dress': 'presenceOfHeadeDress',
        'presence_of_heade_dress_conf': 'presenceOfHeadeDressConf',
        'presence_of_heade_dress_validated': 'presenceOfHeadeDressValidated',
        'type_of_head_dress': 'typeOfHeadDress',
        'type_of_head_dress_conf': 'typeOfHeadDressConf',
        'type_of_head_dress_validated': 'typeOfHeadDressValidated',
        'associated_object': 'associatedObject',
        'associated_object_conf': 'associatedObjectConf',
        'associated_object_validated': 'associatedObjectValidated',
        'presence_of_long_sleeve': 'presenceOfLongSleeve',
        'presence_of_long_sleeve_conf': 'presenceOfLongSleeveConf',
        'presence_of_long_sleeve_validated': 'presenceOfLongSleeveValidated',
        'vehicle_type': 'vehicleType',
        'vehicle_type_conf': 'vehicleTypeConf',
        'vehicle_type_validated': 'vehicleTypeValidated',
        'vehicle_color': 'vehicleColor',
        'vehicle_color_conf': 'vehicleColorConf',
        'vehicle_color_validated': 'vehicleColorValidated',
        'vehicle_make': 'vehicleMake',
        'vehicle_make_conf': 'vehicleMakeConf',
        'vehicle_make_validated': 'vehicleMakeValidated',
        'vehicle_model': 'vehicleModel',
        'vehicle_model_conf': 'vehicleModelConf',
        'vehicle_model_validated': 'vehicleModelValidated',
        'car_type': 'carType',
        'car_type_conf': 'carTypeConf',
        'car_type_validated': 'carTypeValidated',
        'age': 'age',
        'age_conf': 'ageConf',
        'age_validated': 'ageValidated',
        'hair_length': 'hairLength',
        'hair_length_conf': 'hairLengthConf',
        'hair_length_validated': 'hairLengthValidated',
        'hair_colour': 'hairColour',
        'hair_colour_conf': 'hairColourConf',
        'hair_colour_validated': 'hairColourValidated',
        'wear_glass': 'wearGlass',
        'wear_glass_conf': 'wearGlassConf',
        'wear_glass_validated': 'wearGlassValidated',
        'posture': 'posture',
        'posture_conf': 'postureConf',
        'posture_validated': 'postureValidated',
        'bottom_length_type': 'bottomLengthType',
        'bottom_length_type_conf': 'bottomLengthTypeConf',
        'bottom_length_type_validated': 'bottomLengthTypeValidated',
        'head_dress_type': 'headDressType',
        'head_dress_type_conf': 'headDressTypeConf',
        'head_dress_type_validated': 'headDressTypeValidated',
        'head_dress_colour': 'headDressColour',
        'head_dress_colour_conf': 'headDressColourConf',
        'head_dress_colour_validated': 'headDressColourValidated',
        'wears_mask': 'wearsMask',
        'wears_mask_conf': 'wearsMaskConf',
        'wears_mask_validated': 'wearsMaskValidated',
        'mask_colour': 'maskColour',
        'mask_colour_conf': 'maskColourConf',
        'mask_colour_validated': 'maskColourValidated',
        'bag_colour': 'bagColour',
        'bag_colour_conf': 'bagColourConf',
        'bag_colour_validated': 'bagColourValidated',
        'bag_style': 'bagStyle',
        'bag_style_conf': 'bagStyleConf',
        'bag_style_validated': 'bagStyleValidated',
        'face_recognised_person_id1': 'faceRecognisedPersonId1',
        'face_recognised_person_name1': 'faceRecognisedPersonName1',
        'face_recognised_person_id1_conf': 'faceRecognisedPersonId1Conf',
        'face_recognised_person_id1_validated': 'faceRecognisedPersonId1Validated',
        'face_recognised_person_id2': 'faceRecognisedPersonId2',
        'face_recognised_person_name2': 'faceRecognisedPersonName2',
        'face_recognised_person_id2_conf': 'faceRecognisedPersonId2Conf',
        'face_recognised_person_id2_validated': 'faceRecognisedPersonId2Validated',
        'vehicle_license_number': 'vehicleLicenseNumber',
        'vehicle_license_number_conf': 'vehicleLicenseNumberConf',
        'vehicle_license_number_validated': 'vehicleLicenseNumberValidated',
        'vehicle_quality_factor': 'vehicleQualityFactor',
        'human_quality_factor': 'humanQualityFactor',
        'event_time': 'eventTime',
        'channel_id': 'channelId',
        'app_id': 'appId',
        'track_id': 'trackId',
        'unique_event_id': 'uniqueEventId'
    }

    def __init__(self, object_type=1, obj_type_conf=None, obj_type_validated=None, estimated_height=0, top_type=None, top_type_conf=None, top_type_validated=None, top_color=None, top_color_conf=None, top_color_validated=None, bottom_type=None, bottom_type_conf=None, bottom_type_validated=None, bottom_color=None, bottom_color_conf=None, bottom_colore_validated=None, sex=None, gender_conf=None, gender_validated=None, presence_of_bag=None, presence_of_bag_conf=None, presence_of_bag_validated=None, type_of_bag=None, type_of_bag_conf=None, type_of_bag_validated=None, clothing_pattern=None, clothing_pattern_conf=None, clothing_pattern_validated=None, presence_of_heade_dress=None, presence_of_heade_dress_conf=None, presence_of_heade_dress_validated=None, type_of_head_dress=None, type_of_head_dress_conf=None, type_of_head_dress_validated=None, associated_object=None, associated_object_conf=None, associated_object_validated=None, presence_of_long_sleeve=None, presence_of_long_sleeve_conf=None, presence_of_long_sleeve_validated=None, vehicle_type=None, vehicle_type_conf=None, vehicle_type_validated=None, vehicle_color=None, vehicle_color_conf=None, vehicle_color_validated=None, vehicle_make=None, vehicle_make_conf=None, vehicle_make_validated=None, vehicle_model=None, vehicle_model_conf=None, vehicle_model_validated=None, car_type=None, car_type_conf=None, car_type_validated=None, age=None, age_conf=None, age_validated=None, hair_length=None, hair_length_conf=None, hair_length_validated=None, hair_colour=None, hair_colour_conf=None, hair_colour_validated=None, wear_glass=None, wear_glass_conf=None, wear_glass_validated=None, posture=None, posture_conf=None, posture_validated=None, bottom_length_type=None, bottom_length_type_conf=None, bottom_length_type_validated=None, head_dress_type=None, head_dress_type_conf=None, head_dress_type_validated=None, head_dress_colour=None, head_dress_colour_conf=None, head_dress_colour_validated=None, wears_mask=None, wears_mask_conf=None, wears_mask_validated=None, mask_colour=None, mask_colour_conf=None, mask_colour_validated=None, bag_colour=None, bag_colour_conf=None, bag_colour_validated=None, bag_style=None, bag_style_conf=None, bag_style_validated=None, face_recognised_person_id1=None, face_recognised_person_name1=None, face_recognised_person_id1_conf=None, face_recognised_person_id1_validated=None, face_recognised_person_id2=None, face_recognised_person_name2=None, face_recognised_person_id2_conf=None, face_recognised_person_id2_validated=None, vehicle_license_number=None, vehicle_license_number_conf=None, vehicle_license_number_validated=None, vehicle_quality_factor=None, human_quality_factor=None, event_time=None, channel_id=None, app_id=None, track_id=None, unique_event_id=None):  # noqa: E501
        """MetaAttributeEvent - a model defined in Swagger"""  # noqa: E501
        self._object_type = None
        self._obj_type_conf = None
        self._obj_type_validated = None
        self._estimated_height = None
        self._top_type = None
        self._top_type_conf = None
        self._top_type_validated = None
        self._top_color = None
        self._top_color_conf = None
        self._top_color_validated = None
        self._bottom_type = None
        self._bottom_type_conf = None
        self._bottom_type_validated = None
        self._bottom_color = None
        self._bottom_color_conf = None
        self._bottom_colore_validated = None
        self._sex = None
        self._gender_conf = None
        self._gender_validated = None
        self._presence_of_bag = None
        self._presence_of_bag_conf = None
        self._presence_of_bag_validated = None
        self._type_of_bag = None
        self._type_of_bag_conf = None
        self._type_of_bag_validated = None
        self._clothing_pattern = None
        self._clothing_pattern_conf = None
        self._clothing_pattern_validated = None
        self._presence_of_heade_dress = None
        self._presence_of_heade_dress_conf = None
        self._presence_of_heade_dress_validated = None
        self._type_of_head_dress = None
        self._type_of_head_dress_conf = None
        self._type_of_head_dress_validated = None
        self._associated_object = None
        self._associated_object_conf = None
        self._associated_object_validated = None
        self._presence_of_long_sleeve = None
        self._presence_of_long_sleeve_conf = None
        self._presence_of_long_sleeve_validated = None
        self._vehicle_type = None
        self._vehicle_type_conf = None
        self._vehicle_type_validated = None
        self._vehicle_color = None
        self._vehicle_color_conf = None
        self._vehicle_color_validated = None
        self._vehicle_make = None
        self._vehicle_make_conf = None
        self._vehicle_make_validated = None
        self._vehicle_model = None
        self._vehicle_model_conf = None
        self._vehicle_model_validated = None
        self._car_type = None
        self._car_type_conf = None
        self._car_type_validated = None
        self._age = None
        self._age_conf = None
        self._age_validated = None
        self._hair_length = None
        self._hair_length_conf = None
        self._hair_length_validated = None
        self._hair_colour = None
        self._hair_colour_conf = None
        self._hair_colour_validated = None
        self._wear_glass = None
        self._wear_glass_conf = None
        self._wear_glass_validated = None
        self._posture = None
        self._posture_conf = None
        self._posture_validated = None
        self._bottom_length_type = None
        self._bottom_length_type_conf = None
        self._bottom_length_type_validated = None
        self._head_dress_type = None
        self._head_dress_type_conf = None
        self._head_dress_type_validated = None
        self._head_dress_colour = None
        self._head_dress_colour_conf = None
        self._head_dress_colour_validated = None
        self._wears_mask = None
        self._wears_mask_conf = None
        self._wears_mask_validated = None
        self._mask_colour = None
        self._mask_colour_conf = None
        self._mask_colour_validated = None
        self._bag_colour = None
        self._bag_colour_conf = None
        self._bag_colour_validated = None
        self._bag_style = None
        self._bag_style_conf = None
        self._bag_style_validated = None
        self._face_recognised_person_id1 = None
        self._face_recognised_person_name1 = None
        self._face_recognised_person_id1_conf = None
        self._face_recognised_person_id1_validated = None
        self._face_recognised_person_id2 = None
        self._face_recognised_person_name2 = None
        self._face_recognised_person_id2_conf = None
        self._face_recognised_person_id2_validated = None
        self._vehicle_license_number = None
        self._vehicle_license_number_conf = None
        self._vehicle_license_number_validated = None
        self._vehicle_quality_factor = None
        self._human_quality_factor = None
        self._event_time = None
        self._channel_id = None
        self._app_id = None
        self._track_id = None
        self._unique_event_id = None
        self.discriminator = None
        if object_type is not None:
            self.object_type = object_type
        if obj_type_conf is not None:
            self.obj_type_conf = obj_type_conf
        if obj_type_validated is not None:
            self.obj_type_validated = obj_type_validated
        if estimated_height is not None:
            self.estimated_height = estimated_height
        if top_type is not None:
            self.top_type = top_type
        if top_type_conf is not None:
            self.top_type_conf = top_type_conf
        if top_type_validated is not None:
            self.top_type_validated = top_type_validated
        if top_color is not None:
            self.top_color = top_color
        if top_color_conf is not None:
            self.top_color_conf = top_color_conf
        if top_color_validated is not None:
            self.top_color_validated = top_color_validated
        if bottom_type is not None:
            self.bottom_type = bottom_type
        if bottom_type_conf is not None:
            self.bottom_type_conf = bottom_type_conf
        if bottom_type_validated is not None:
            self.bottom_type_validated = bottom_type_validated
        if bottom_color is not None:
            self.bottom_color = bottom_color
        if bottom_color_conf is not None:
            self.bottom_color_conf = bottom_color_conf
        if bottom_colore_validated is not None:
            self.bottom_colore_validated = bottom_colore_validated
        if sex is not None:
            self.sex = sex
        if gender_conf is not None:
            self.gender_conf = gender_conf
        if gender_validated is not None:
            self.gender_validated = gender_validated
        if presence_of_bag is not None:
            self.presence_of_bag = presence_of_bag
        if presence_of_bag_conf is not None:
            self.presence_of_bag_conf = presence_of_bag_conf
        if presence_of_bag_validated is not None:
            self.presence_of_bag_validated = presence_of_bag_validated
        if type_of_bag is not None:
            self.type_of_bag = type_of_bag
        if type_of_bag_conf is not None:
            self.type_of_bag_conf = type_of_bag_conf
        if type_of_bag_validated is not None:
            self.type_of_bag_validated = type_of_bag_validated
        if clothing_pattern is not None:
            self.clothing_pattern = clothing_pattern
        if clothing_pattern_conf is not None:
            self.clothing_pattern_conf = clothing_pattern_conf
        if clothing_pattern_validated is not None:
            self.clothing_pattern_validated = clothing_pattern_validated
        if presence_of_heade_dress is not None:
            self.presence_of_heade_dress = presence_of_heade_dress
        if presence_of_heade_dress_conf is not None:
            self.presence_of_heade_dress_conf = presence_of_heade_dress_conf
        if presence_of_heade_dress_validated is not None:
            self.presence_of_heade_dress_validated = presence_of_heade_dress_validated
        if type_of_head_dress is not None:
            self.type_of_head_dress = type_of_head_dress
        if type_of_head_dress_conf is not None:
            self.type_of_head_dress_conf = type_of_head_dress_conf
        if type_of_head_dress_validated is not None:
            self.type_of_head_dress_validated = type_of_head_dress_validated
        if associated_object is not None:
            self.associated_object = associated_object
        if associated_object_conf is not None:
            self.associated_object_conf = associated_object_conf
        if associated_object_validated is not None:
            self.associated_object_validated = associated_object_validated
        if presence_of_long_sleeve is not None:
            self.presence_of_long_sleeve = presence_of_long_sleeve
        if presence_of_long_sleeve_conf is not None:
            self.presence_of_long_sleeve_conf = presence_of_long_sleeve_conf
        if presence_of_long_sleeve_validated is not None:
            self.presence_of_long_sleeve_validated = presence_of_long_sleeve_validated
        if vehicle_type is not None:
            self.vehicle_type = vehicle_type
        if vehicle_type_conf is not None:
            self.vehicle_type_conf = vehicle_type_conf
        if vehicle_type_validated is not None:
            self.vehicle_type_validated = vehicle_type_validated
        if vehicle_color is not None:
            self.vehicle_color = vehicle_color
        if vehicle_color_conf is not None:
            self.vehicle_color_conf = vehicle_color_conf
        if vehicle_color_validated is not None:
            self.vehicle_color_validated = vehicle_color_validated
        if vehicle_make is not None:
            self.vehicle_make = vehicle_make
        if vehicle_make_conf is not None:
            self.vehicle_make_conf = vehicle_make_conf
        if vehicle_make_validated is not None:
            self.vehicle_make_validated = vehicle_make_validated
        if vehicle_model is not None:
            self.vehicle_model = vehicle_model
        if vehicle_model_conf is not None:
            self.vehicle_model_conf = vehicle_model_conf
        if vehicle_model_validated is not None:
            self.vehicle_model_validated = vehicle_model_validated
        if car_type is not None:
            self.car_type = car_type
        if car_type_conf is not None:
            self.car_type_conf = car_type_conf
        if car_type_validated is not None:
            self.car_type_validated = car_type_validated
        if age is not None:
            self.age = age
        if age_conf is not None:
            self.age_conf = age_conf
        if age_validated is not None:
            self.age_validated = age_validated
        if hair_length is not None:
            self.hair_length = hair_length
        if hair_length_conf is not None:
            self.hair_length_conf = hair_length_conf
        if hair_length_validated is not None:
            self.hair_length_validated = hair_length_validated
        if hair_colour is not None:
            self.hair_colour = hair_colour
        if hair_colour_conf is not None:
            self.hair_colour_conf = hair_colour_conf
        if hair_colour_validated is not None:
            self.hair_colour_validated = hair_colour_validated
        if wear_glass is not None:
            self.wear_glass = wear_glass
        if wear_glass_conf is not None:
            self.wear_glass_conf = wear_glass_conf
        if wear_glass_validated is not None:
            self.wear_glass_validated = wear_glass_validated
        if posture is not None:
            self.posture = posture
        if posture_conf is not None:
            self.posture_conf = posture_conf
        if posture_validated is not None:
            self.posture_validated = posture_validated
        if bottom_length_type is not None:
            self.bottom_length_type = bottom_length_type
        if bottom_length_type_conf is not None:
            self.bottom_length_type_conf = bottom_length_type_conf
        if bottom_length_type_validated is not None:
            self.bottom_length_type_validated = bottom_length_type_validated
        if head_dress_type is not None:
            self.head_dress_type = head_dress_type
        if head_dress_type_conf is not None:
            self.head_dress_type_conf = head_dress_type_conf
        if head_dress_type_validated is not None:
            self.head_dress_type_validated = head_dress_type_validated
        if head_dress_colour is not None:
            self.head_dress_colour = head_dress_colour
        if head_dress_colour_conf is not None:
            self.head_dress_colour_conf = head_dress_colour_conf
        if head_dress_colour_validated is not None:
            self.head_dress_colour_validated = head_dress_colour_validated
        if wears_mask is not None:
            self.wears_mask = wears_mask
        if wears_mask_conf is not None:
            self.wears_mask_conf = wears_mask_conf
        if wears_mask_validated is not None:
            self.wears_mask_validated = wears_mask_validated
        if mask_colour is not None:
            self.mask_colour = mask_colour
        if mask_colour_conf is not None:
            self.mask_colour_conf = mask_colour_conf
        if mask_colour_validated is not None:
            self.mask_colour_validated = mask_colour_validated
        if bag_colour is not None:
            self.bag_colour = bag_colour
        if bag_colour_conf is not None:
            self.bag_colour_conf = bag_colour_conf
        if bag_colour_validated is not None:
            self.bag_colour_validated = bag_colour_validated
        if bag_style is not None:
            self.bag_style = bag_style
        if bag_style_conf is not None:
            self.bag_style_conf = bag_style_conf
        if bag_style_validated is not None:
            self.bag_style_validated = bag_style_validated
        if face_recognised_person_id1 is not None:
            self.face_recognised_person_id1 = face_recognised_person_id1
        if face_recognised_person_name1 is not None:
            self.face_recognised_person_name1 = face_recognised_person_name1
        if face_recognised_person_id1_conf is not None:
            self.face_recognised_person_id1_conf = face_recognised_person_id1_conf
        if face_recognised_person_id1_validated is not None:
            self.face_recognised_person_id1_validated = face_recognised_person_id1_validated
        if face_recognised_person_id2 is not None:
            self.face_recognised_person_id2 = face_recognised_person_id2
        if face_recognised_person_name2 is not None:
            self.face_recognised_person_name2 = face_recognised_person_name2
        if face_recognised_person_id2_conf is not None:
            self.face_recognised_person_id2_conf = face_recognised_person_id2_conf
        if face_recognised_person_id2_validated is not None:
            self.face_recognised_person_id2_validated = face_recognised_person_id2_validated
        if vehicle_license_number is not None:
            self.vehicle_license_number = vehicle_license_number
        if vehicle_license_number_conf is not None:
            self.vehicle_license_number_conf = vehicle_license_number_conf
        if vehicle_license_number_validated is not None:
            self.vehicle_license_number_validated = vehicle_license_number_validated
        if vehicle_quality_factor is not None:
            self.vehicle_quality_factor = vehicle_quality_factor
        if human_quality_factor is not None:
            self.human_quality_factor = human_quality_factor
        if event_time is not None:
            self.event_time = event_time
        if channel_id is not None:
            self.channel_id = channel_id
        if app_id is not None:
            self.app_id = app_id
        if track_id is not None:
            self.track_id = track_id
        if unique_event_id is not None:
            self.unique_event_id = unique_event_id

    @property
    def object_type(self):
        """Gets the object_type of this MetaAttributeEvent.  # noqa: E501

        0 - Undefined 1 - Human, 2 - Vehicle, 3 - Animal  # noqa: E501

        :return: The object_type of this MetaAttributeEvent.  # noqa: E501
        :rtype: int
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this MetaAttributeEvent.

        0 - Undefined 1 - Human, 2 - Vehicle, 3 - Animal  # noqa: E501

        :param object_type: The object_type of this MetaAttributeEvent.  # noqa: E501
        :type: int
        """

        self._object_type = object_type

    @property
    def obj_type_conf(self):
        """Gets the obj_type_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The obj_type_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._obj_type_conf

    @obj_type_conf.setter
    def obj_type_conf(self, obj_type_conf):
        """Sets the obj_type_conf of this MetaAttributeEvent.


        :param obj_type_conf: The obj_type_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._obj_type_conf = obj_type_conf

    @property
    def obj_type_validated(self):
        """Gets the obj_type_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The obj_type_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._obj_type_validated

    @obj_type_validated.setter
    def obj_type_validated(self, obj_type_validated):
        """Sets the obj_type_validated of this MetaAttributeEvent.


        :param obj_type_validated: The obj_type_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._obj_type_validated = obj_type_validated

    @property
    def estimated_height(self):
        """Gets the estimated_height of this MetaAttributeEvent.  # noqa: E501


        :return: The estimated_height of this MetaAttributeEvent.  # noqa: E501
        :rtype: int
        """
        return self._estimated_height

    @estimated_height.setter
    def estimated_height(self, estimated_height):
        """Sets the estimated_height of this MetaAttributeEvent.


        :param estimated_height: The estimated_height of this MetaAttributeEvent.  # noqa: E501
        :type: int
        """

        self._estimated_height = estimated_height

    @property
    def top_type(self):
        """Gets the top_type of this MetaAttributeEvent.  # noqa: E501


        :return: The top_type of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._top_type

    @top_type.setter
    def top_type(self, top_type):
        """Sets the top_type of this MetaAttributeEvent.


        :param top_type: The top_type of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._top_type = top_type

    @property
    def top_type_conf(self):
        """Gets the top_type_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The top_type_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._top_type_conf

    @top_type_conf.setter
    def top_type_conf(self, top_type_conf):
        """Sets the top_type_conf of this MetaAttributeEvent.


        :param top_type_conf: The top_type_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._top_type_conf = top_type_conf

    @property
    def top_type_validated(self):
        """Gets the top_type_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The top_type_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._top_type_validated

    @top_type_validated.setter
    def top_type_validated(self, top_type_validated):
        """Sets the top_type_validated of this MetaAttributeEvent.


        :param top_type_validated: The top_type_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._top_type_validated = top_type_validated

    @property
    def top_color(self):
        """Gets the top_color of this MetaAttributeEvent.  # noqa: E501


        :return: The top_color of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._top_color

    @top_color.setter
    def top_color(self, top_color):
        """Sets the top_color of this MetaAttributeEvent.


        :param top_color: The top_color of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._top_color = top_color

    @property
    def top_color_conf(self):
        """Gets the top_color_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The top_color_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._top_color_conf

    @top_color_conf.setter
    def top_color_conf(self, top_color_conf):
        """Sets the top_color_conf of this MetaAttributeEvent.


        :param top_color_conf: The top_color_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._top_color_conf = top_color_conf

    @property
    def top_color_validated(self):
        """Gets the top_color_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The top_color_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._top_color_validated

    @top_color_validated.setter
    def top_color_validated(self, top_color_validated):
        """Sets the top_color_validated of this MetaAttributeEvent.


        :param top_color_validated: The top_color_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._top_color_validated = top_color_validated

    @property
    def bottom_type(self):
        """Gets the bottom_type of this MetaAttributeEvent.  # noqa: E501


        :return: The bottom_type of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._bottom_type

    @bottom_type.setter
    def bottom_type(self, bottom_type):
        """Sets the bottom_type of this MetaAttributeEvent.


        :param bottom_type: The bottom_type of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._bottom_type = bottom_type

    @property
    def bottom_type_conf(self):
        """Gets the bottom_type_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The bottom_type_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._bottom_type_conf

    @bottom_type_conf.setter
    def bottom_type_conf(self, bottom_type_conf):
        """Sets the bottom_type_conf of this MetaAttributeEvent.


        :param bottom_type_conf: The bottom_type_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._bottom_type_conf = bottom_type_conf

    @property
    def bottom_type_validated(self):
        """Gets the bottom_type_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The bottom_type_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._bottom_type_validated

    @bottom_type_validated.setter
    def bottom_type_validated(self, bottom_type_validated):
        """Sets the bottom_type_validated of this MetaAttributeEvent.


        :param bottom_type_validated: The bottom_type_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._bottom_type_validated = bottom_type_validated

    @property
    def bottom_color(self):
        """Gets the bottom_color of this MetaAttributeEvent.  # noqa: E501


        :return: The bottom_color of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._bottom_color

    @bottom_color.setter
    def bottom_color(self, bottom_color):
        """Sets the bottom_color of this MetaAttributeEvent.


        :param bottom_color: The bottom_color of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._bottom_color = bottom_color

    @property
    def bottom_color_conf(self):
        """Gets the bottom_color_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The bottom_color_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._bottom_color_conf

    @bottom_color_conf.setter
    def bottom_color_conf(self, bottom_color_conf):
        """Sets the bottom_color_conf of this MetaAttributeEvent.


        :param bottom_color_conf: The bottom_color_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._bottom_color_conf = bottom_color_conf

    @property
    def bottom_colore_validated(self):
        """Gets the bottom_colore_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The bottom_colore_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._bottom_colore_validated

    @bottom_colore_validated.setter
    def bottom_colore_validated(self, bottom_colore_validated):
        """Sets the bottom_colore_validated of this MetaAttributeEvent.


        :param bottom_colore_validated: The bottom_colore_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._bottom_colore_validated = bottom_colore_validated

    @property
    def sex(self):
        """Gets the sex of this MetaAttributeEvent.  # noqa: E501


        :return: The sex of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this MetaAttributeEvent.


        :param sex: The sex of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._sex = sex

    @property
    def gender_conf(self):
        """Gets the gender_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The gender_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._gender_conf

    @gender_conf.setter
    def gender_conf(self, gender_conf):
        """Sets the gender_conf of this MetaAttributeEvent.


        :param gender_conf: The gender_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._gender_conf = gender_conf

    @property
    def gender_validated(self):
        """Gets the gender_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The gender_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._gender_validated

    @gender_validated.setter
    def gender_validated(self, gender_validated):
        """Sets the gender_validated of this MetaAttributeEvent.


        :param gender_validated: The gender_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._gender_validated = gender_validated

    @property
    def presence_of_bag(self):
        """Gets the presence_of_bag of this MetaAttributeEvent.  # noqa: E501


        :return: The presence_of_bag of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._presence_of_bag

    @presence_of_bag.setter
    def presence_of_bag(self, presence_of_bag):
        """Sets the presence_of_bag of this MetaAttributeEvent.


        :param presence_of_bag: The presence_of_bag of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._presence_of_bag = presence_of_bag

    @property
    def presence_of_bag_conf(self):
        """Gets the presence_of_bag_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The presence_of_bag_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._presence_of_bag_conf

    @presence_of_bag_conf.setter
    def presence_of_bag_conf(self, presence_of_bag_conf):
        """Sets the presence_of_bag_conf of this MetaAttributeEvent.


        :param presence_of_bag_conf: The presence_of_bag_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._presence_of_bag_conf = presence_of_bag_conf

    @property
    def presence_of_bag_validated(self):
        """Gets the presence_of_bag_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The presence_of_bag_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._presence_of_bag_validated

    @presence_of_bag_validated.setter
    def presence_of_bag_validated(self, presence_of_bag_validated):
        """Sets the presence_of_bag_validated of this MetaAttributeEvent.


        :param presence_of_bag_validated: The presence_of_bag_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._presence_of_bag_validated = presence_of_bag_validated

    @property
    def type_of_bag(self):
        """Gets the type_of_bag of this MetaAttributeEvent.  # noqa: E501


        :return: The type_of_bag of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._type_of_bag

    @type_of_bag.setter
    def type_of_bag(self, type_of_bag):
        """Sets the type_of_bag of this MetaAttributeEvent.


        :param type_of_bag: The type_of_bag of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._type_of_bag = type_of_bag

    @property
    def type_of_bag_conf(self):
        """Gets the type_of_bag_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The type_of_bag_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._type_of_bag_conf

    @type_of_bag_conf.setter
    def type_of_bag_conf(self, type_of_bag_conf):
        """Sets the type_of_bag_conf of this MetaAttributeEvent.


        :param type_of_bag_conf: The type_of_bag_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._type_of_bag_conf = type_of_bag_conf

    @property
    def type_of_bag_validated(self):
        """Gets the type_of_bag_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The type_of_bag_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._type_of_bag_validated

    @type_of_bag_validated.setter
    def type_of_bag_validated(self, type_of_bag_validated):
        """Sets the type_of_bag_validated of this MetaAttributeEvent.


        :param type_of_bag_validated: The type_of_bag_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._type_of_bag_validated = type_of_bag_validated

    @property
    def clothing_pattern(self):
        """Gets the clothing_pattern of this MetaAttributeEvent.  # noqa: E501


        :return: The clothing_pattern of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._clothing_pattern

    @clothing_pattern.setter
    def clothing_pattern(self, clothing_pattern):
        """Sets the clothing_pattern of this MetaAttributeEvent.


        :param clothing_pattern: The clothing_pattern of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._clothing_pattern = clothing_pattern

    @property
    def clothing_pattern_conf(self):
        """Gets the clothing_pattern_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The clothing_pattern_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._clothing_pattern_conf

    @clothing_pattern_conf.setter
    def clothing_pattern_conf(self, clothing_pattern_conf):
        """Sets the clothing_pattern_conf of this MetaAttributeEvent.


        :param clothing_pattern_conf: The clothing_pattern_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._clothing_pattern_conf = clothing_pattern_conf

    @property
    def clothing_pattern_validated(self):
        """Gets the clothing_pattern_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The clothing_pattern_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._clothing_pattern_validated

    @clothing_pattern_validated.setter
    def clothing_pattern_validated(self, clothing_pattern_validated):
        """Sets the clothing_pattern_validated of this MetaAttributeEvent.


        :param clothing_pattern_validated: The clothing_pattern_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._clothing_pattern_validated = clothing_pattern_validated

    @property
    def presence_of_heade_dress(self):
        """Gets the presence_of_heade_dress of this MetaAttributeEvent.  # noqa: E501


        :return: The presence_of_heade_dress of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._presence_of_heade_dress

    @presence_of_heade_dress.setter
    def presence_of_heade_dress(self, presence_of_heade_dress):
        """Sets the presence_of_heade_dress of this MetaAttributeEvent.


        :param presence_of_heade_dress: The presence_of_heade_dress of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._presence_of_heade_dress = presence_of_heade_dress

    @property
    def presence_of_heade_dress_conf(self):
        """Gets the presence_of_heade_dress_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The presence_of_heade_dress_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._presence_of_heade_dress_conf

    @presence_of_heade_dress_conf.setter
    def presence_of_heade_dress_conf(self, presence_of_heade_dress_conf):
        """Sets the presence_of_heade_dress_conf of this MetaAttributeEvent.


        :param presence_of_heade_dress_conf: The presence_of_heade_dress_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._presence_of_heade_dress_conf = presence_of_heade_dress_conf

    @property
    def presence_of_heade_dress_validated(self):
        """Gets the presence_of_heade_dress_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The presence_of_heade_dress_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._presence_of_heade_dress_validated

    @presence_of_heade_dress_validated.setter
    def presence_of_heade_dress_validated(self, presence_of_heade_dress_validated):
        """Sets the presence_of_heade_dress_validated of this MetaAttributeEvent.


        :param presence_of_heade_dress_validated: The presence_of_heade_dress_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._presence_of_heade_dress_validated = presence_of_heade_dress_validated

    @property
    def type_of_head_dress(self):
        """Gets the type_of_head_dress of this MetaAttributeEvent.  # noqa: E501


        :return: The type_of_head_dress of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._type_of_head_dress

    @type_of_head_dress.setter
    def type_of_head_dress(self, type_of_head_dress):
        """Sets the type_of_head_dress of this MetaAttributeEvent.


        :param type_of_head_dress: The type_of_head_dress of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._type_of_head_dress = type_of_head_dress

    @property
    def type_of_head_dress_conf(self):
        """Gets the type_of_head_dress_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The type_of_head_dress_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._type_of_head_dress_conf

    @type_of_head_dress_conf.setter
    def type_of_head_dress_conf(self, type_of_head_dress_conf):
        """Sets the type_of_head_dress_conf of this MetaAttributeEvent.


        :param type_of_head_dress_conf: The type_of_head_dress_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._type_of_head_dress_conf = type_of_head_dress_conf

    @property
    def type_of_head_dress_validated(self):
        """Gets the type_of_head_dress_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The type_of_head_dress_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._type_of_head_dress_validated

    @type_of_head_dress_validated.setter
    def type_of_head_dress_validated(self, type_of_head_dress_validated):
        """Sets the type_of_head_dress_validated of this MetaAttributeEvent.


        :param type_of_head_dress_validated: The type_of_head_dress_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._type_of_head_dress_validated = type_of_head_dress_validated

    @property
    def associated_object(self):
        """Gets the associated_object of this MetaAttributeEvent.  # noqa: E501


        :return: The associated_object of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._associated_object

    @associated_object.setter
    def associated_object(self, associated_object):
        """Sets the associated_object of this MetaAttributeEvent.


        :param associated_object: The associated_object of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._associated_object = associated_object

    @property
    def associated_object_conf(self):
        """Gets the associated_object_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The associated_object_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._associated_object_conf

    @associated_object_conf.setter
    def associated_object_conf(self, associated_object_conf):
        """Sets the associated_object_conf of this MetaAttributeEvent.


        :param associated_object_conf: The associated_object_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._associated_object_conf = associated_object_conf

    @property
    def associated_object_validated(self):
        """Gets the associated_object_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The associated_object_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._associated_object_validated

    @associated_object_validated.setter
    def associated_object_validated(self, associated_object_validated):
        """Sets the associated_object_validated of this MetaAttributeEvent.


        :param associated_object_validated: The associated_object_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._associated_object_validated = associated_object_validated

    @property
    def presence_of_long_sleeve(self):
        """Gets the presence_of_long_sleeve of this MetaAttributeEvent.  # noqa: E501


        :return: The presence_of_long_sleeve of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._presence_of_long_sleeve

    @presence_of_long_sleeve.setter
    def presence_of_long_sleeve(self, presence_of_long_sleeve):
        """Sets the presence_of_long_sleeve of this MetaAttributeEvent.


        :param presence_of_long_sleeve: The presence_of_long_sleeve of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._presence_of_long_sleeve = presence_of_long_sleeve

    @property
    def presence_of_long_sleeve_conf(self):
        """Gets the presence_of_long_sleeve_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The presence_of_long_sleeve_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._presence_of_long_sleeve_conf

    @presence_of_long_sleeve_conf.setter
    def presence_of_long_sleeve_conf(self, presence_of_long_sleeve_conf):
        """Sets the presence_of_long_sleeve_conf of this MetaAttributeEvent.


        :param presence_of_long_sleeve_conf: The presence_of_long_sleeve_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._presence_of_long_sleeve_conf = presence_of_long_sleeve_conf

    @property
    def presence_of_long_sleeve_validated(self):
        """Gets the presence_of_long_sleeve_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The presence_of_long_sleeve_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._presence_of_long_sleeve_validated

    @presence_of_long_sleeve_validated.setter
    def presence_of_long_sleeve_validated(self, presence_of_long_sleeve_validated):
        """Sets the presence_of_long_sleeve_validated of this MetaAttributeEvent.


        :param presence_of_long_sleeve_validated: The presence_of_long_sleeve_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._presence_of_long_sleeve_validated = presence_of_long_sleeve_validated

    @property
    def vehicle_type(self):
        """Gets the vehicle_type of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_type of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_type

    @vehicle_type.setter
    def vehicle_type(self, vehicle_type):
        """Sets the vehicle_type of this MetaAttributeEvent.


        :param vehicle_type: The vehicle_type of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._vehicle_type = vehicle_type

    @property
    def vehicle_type_conf(self):
        """Gets the vehicle_type_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_type_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._vehicle_type_conf

    @vehicle_type_conf.setter
    def vehicle_type_conf(self, vehicle_type_conf):
        """Sets the vehicle_type_conf of this MetaAttributeEvent.


        :param vehicle_type_conf: The vehicle_type_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._vehicle_type_conf = vehicle_type_conf

    @property
    def vehicle_type_validated(self):
        """Gets the vehicle_type_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_type_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._vehicle_type_validated

    @vehicle_type_validated.setter
    def vehicle_type_validated(self, vehicle_type_validated):
        """Sets the vehicle_type_validated of this MetaAttributeEvent.


        :param vehicle_type_validated: The vehicle_type_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._vehicle_type_validated = vehicle_type_validated

    @property
    def vehicle_color(self):
        """Gets the vehicle_color of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_color of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_color

    @vehicle_color.setter
    def vehicle_color(self, vehicle_color):
        """Sets the vehicle_color of this MetaAttributeEvent.


        :param vehicle_color: The vehicle_color of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._vehicle_color = vehicle_color

    @property
    def vehicle_color_conf(self):
        """Gets the vehicle_color_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_color_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._vehicle_color_conf

    @vehicle_color_conf.setter
    def vehicle_color_conf(self, vehicle_color_conf):
        """Sets the vehicle_color_conf of this MetaAttributeEvent.


        :param vehicle_color_conf: The vehicle_color_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._vehicle_color_conf = vehicle_color_conf

    @property
    def vehicle_color_validated(self):
        """Gets the vehicle_color_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_color_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._vehicle_color_validated

    @vehicle_color_validated.setter
    def vehicle_color_validated(self, vehicle_color_validated):
        """Sets the vehicle_color_validated of this MetaAttributeEvent.


        :param vehicle_color_validated: The vehicle_color_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._vehicle_color_validated = vehicle_color_validated

    @property
    def vehicle_make(self):
        """Gets the vehicle_make of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_make of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_make

    @vehicle_make.setter
    def vehicle_make(self, vehicle_make):
        """Sets the vehicle_make of this MetaAttributeEvent.


        :param vehicle_make: The vehicle_make of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._vehicle_make = vehicle_make

    @property
    def vehicle_make_conf(self):
        """Gets the vehicle_make_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_make_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._vehicle_make_conf

    @vehicle_make_conf.setter
    def vehicle_make_conf(self, vehicle_make_conf):
        """Sets the vehicle_make_conf of this MetaAttributeEvent.


        :param vehicle_make_conf: The vehicle_make_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._vehicle_make_conf = vehicle_make_conf

    @property
    def vehicle_make_validated(self):
        """Gets the vehicle_make_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_make_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._vehicle_make_validated

    @vehicle_make_validated.setter
    def vehicle_make_validated(self, vehicle_make_validated):
        """Sets the vehicle_make_validated of this MetaAttributeEvent.


        :param vehicle_make_validated: The vehicle_make_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._vehicle_make_validated = vehicle_make_validated

    @property
    def vehicle_model(self):
        """Gets the vehicle_model of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_model of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_model

    @vehicle_model.setter
    def vehicle_model(self, vehicle_model):
        """Sets the vehicle_model of this MetaAttributeEvent.


        :param vehicle_model: The vehicle_model of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._vehicle_model = vehicle_model

    @property
    def vehicle_model_conf(self):
        """Gets the vehicle_model_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_model_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._vehicle_model_conf

    @vehicle_model_conf.setter
    def vehicle_model_conf(self, vehicle_model_conf):
        """Sets the vehicle_model_conf of this MetaAttributeEvent.


        :param vehicle_model_conf: The vehicle_model_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._vehicle_model_conf = vehicle_model_conf

    @property
    def vehicle_model_validated(self):
        """Gets the vehicle_model_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_model_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._vehicle_model_validated

    @vehicle_model_validated.setter
    def vehicle_model_validated(self, vehicle_model_validated):
        """Sets the vehicle_model_validated of this MetaAttributeEvent.


        :param vehicle_model_validated: The vehicle_model_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._vehicle_model_validated = vehicle_model_validated

    @property
    def car_type(self):
        """Gets the car_type of this MetaAttributeEvent.  # noqa: E501


        :return: The car_type of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._car_type

    @car_type.setter
    def car_type(self, car_type):
        """Sets the car_type of this MetaAttributeEvent.


        :param car_type: The car_type of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._car_type = car_type

    @property
    def car_type_conf(self):
        """Gets the car_type_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The car_type_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._car_type_conf

    @car_type_conf.setter
    def car_type_conf(self, car_type_conf):
        """Sets the car_type_conf of this MetaAttributeEvent.


        :param car_type_conf: The car_type_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._car_type_conf = car_type_conf

    @property
    def car_type_validated(self):
        """Gets the car_type_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The car_type_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._car_type_validated

    @car_type_validated.setter
    def car_type_validated(self, car_type_validated):
        """Sets the car_type_validated of this MetaAttributeEvent.


        :param car_type_validated: The car_type_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._car_type_validated = car_type_validated

    @property
    def age(self):
        """Gets the age of this MetaAttributeEvent.  # noqa: E501


        :return: The age of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this MetaAttributeEvent.


        :param age: The age of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._age = age

    @property
    def age_conf(self):
        """Gets the age_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The age_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._age_conf

    @age_conf.setter
    def age_conf(self, age_conf):
        """Sets the age_conf of this MetaAttributeEvent.


        :param age_conf: The age_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._age_conf = age_conf

    @property
    def age_validated(self):
        """Gets the age_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The age_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._age_validated

    @age_validated.setter
    def age_validated(self, age_validated):
        """Sets the age_validated of this MetaAttributeEvent.


        :param age_validated: The age_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._age_validated = age_validated

    @property
    def hair_length(self):
        """Gets the hair_length of this MetaAttributeEvent.  # noqa: E501


        :return: The hair_length of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._hair_length

    @hair_length.setter
    def hair_length(self, hair_length):
        """Sets the hair_length of this MetaAttributeEvent.


        :param hair_length: The hair_length of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._hair_length = hair_length

    @property
    def hair_length_conf(self):
        """Gets the hair_length_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The hair_length_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._hair_length_conf

    @hair_length_conf.setter
    def hair_length_conf(self, hair_length_conf):
        """Sets the hair_length_conf of this MetaAttributeEvent.


        :param hair_length_conf: The hair_length_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._hair_length_conf = hair_length_conf

    @property
    def hair_length_validated(self):
        """Gets the hair_length_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The hair_length_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._hair_length_validated

    @hair_length_validated.setter
    def hair_length_validated(self, hair_length_validated):
        """Sets the hair_length_validated of this MetaAttributeEvent.


        :param hair_length_validated: The hair_length_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._hair_length_validated = hair_length_validated

    @property
    def hair_colour(self):
        """Gets the hair_colour of this MetaAttributeEvent.  # noqa: E501


        :return: The hair_colour of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._hair_colour

    @hair_colour.setter
    def hair_colour(self, hair_colour):
        """Sets the hair_colour of this MetaAttributeEvent.


        :param hair_colour: The hair_colour of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._hair_colour = hair_colour

    @property
    def hair_colour_conf(self):
        """Gets the hair_colour_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The hair_colour_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._hair_colour_conf

    @hair_colour_conf.setter
    def hair_colour_conf(self, hair_colour_conf):
        """Sets the hair_colour_conf of this MetaAttributeEvent.


        :param hair_colour_conf: The hair_colour_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._hair_colour_conf = hair_colour_conf

    @property
    def hair_colour_validated(self):
        """Gets the hair_colour_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The hair_colour_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._hair_colour_validated

    @hair_colour_validated.setter
    def hair_colour_validated(self, hair_colour_validated):
        """Sets the hair_colour_validated of this MetaAttributeEvent.


        :param hair_colour_validated: The hair_colour_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._hair_colour_validated = hair_colour_validated

    @property
    def wear_glass(self):
        """Gets the wear_glass of this MetaAttributeEvent.  # noqa: E501


        :return: The wear_glass of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._wear_glass

    @wear_glass.setter
    def wear_glass(self, wear_glass):
        """Sets the wear_glass of this MetaAttributeEvent.


        :param wear_glass: The wear_glass of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._wear_glass = wear_glass

    @property
    def wear_glass_conf(self):
        """Gets the wear_glass_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The wear_glass_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._wear_glass_conf

    @wear_glass_conf.setter
    def wear_glass_conf(self, wear_glass_conf):
        """Sets the wear_glass_conf of this MetaAttributeEvent.


        :param wear_glass_conf: The wear_glass_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._wear_glass_conf = wear_glass_conf

    @property
    def wear_glass_validated(self):
        """Gets the wear_glass_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The wear_glass_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._wear_glass_validated

    @wear_glass_validated.setter
    def wear_glass_validated(self, wear_glass_validated):
        """Sets the wear_glass_validated of this MetaAttributeEvent.


        :param wear_glass_validated: The wear_glass_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._wear_glass_validated = wear_glass_validated

    @property
    def posture(self):
        """Gets the posture of this MetaAttributeEvent.  # noqa: E501


        :return: The posture of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._posture

    @posture.setter
    def posture(self, posture):
        """Sets the posture of this MetaAttributeEvent.


        :param posture: The posture of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._posture = posture

    @property
    def posture_conf(self):
        """Gets the posture_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The posture_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._posture_conf

    @posture_conf.setter
    def posture_conf(self, posture_conf):
        """Sets the posture_conf of this MetaAttributeEvent.


        :param posture_conf: The posture_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._posture_conf = posture_conf

    @property
    def posture_validated(self):
        """Gets the posture_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The posture_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._posture_validated

    @posture_validated.setter
    def posture_validated(self, posture_validated):
        """Sets the posture_validated of this MetaAttributeEvent.


        :param posture_validated: The posture_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._posture_validated = posture_validated

    @property
    def bottom_length_type(self):
        """Gets the bottom_length_type of this MetaAttributeEvent.  # noqa: E501


        :return: The bottom_length_type of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._bottom_length_type

    @bottom_length_type.setter
    def bottom_length_type(self, bottom_length_type):
        """Sets the bottom_length_type of this MetaAttributeEvent.


        :param bottom_length_type: The bottom_length_type of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._bottom_length_type = bottom_length_type

    @property
    def bottom_length_type_conf(self):
        """Gets the bottom_length_type_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The bottom_length_type_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._bottom_length_type_conf

    @bottom_length_type_conf.setter
    def bottom_length_type_conf(self, bottom_length_type_conf):
        """Sets the bottom_length_type_conf of this MetaAttributeEvent.


        :param bottom_length_type_conf: The bottom_length_type_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._bottom_length_type_conf = bottom_length_type_conf

    @property
    def bottom_length_type_validated(self):
        """Gets the bottom_length_type_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The bottom_length_type_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._bottom_length_type_validated

    @bottom_length_type_validated.setter
    def bottom_length_type_validated(self, bottom_length_type_validated):
        """Sets the bottom_length_type_validated of this MetaAttributeEvent.


        :param bottom_length_type_validated: The bottom_length_type_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._bottom_length_type_validated = bottom_length_type_validated

    @property
    def head_dress_type(self):
        """Gets the head_dress_type of this MetaAttributeEvent.  # noqa: E501


        :return: The head_dress_type of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._head_dress_type

    @head_dress_type.setter
    def head_dress_type(self, head_dress_type):
        """Sets the head_dress_type of this MetaAttributeEvent.


        :param head_dress_type: The head_dress_type of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._head_dress_type = head_dress_type

    @property
    def head_dress_type_conf(self):
        """Gets the head_dress_type_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The head_dress_type_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._head_dress_type_conf

    @head_dress_type_conf.setter
    def head_dress_type_conf(self, head_dress_type_conf):
        """Sets the head_dress_type_conf of this MetaAttributeEvent.


        :param head_dress_type_conf: The head_dress_type_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._head_dress_type_conf = head_dress_type_conf

    @property
    def head_dress_type_validated(self):
        """Gets the head_dress_type_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The head_dress_type_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._head_dress_type_validated

    @head_dress_type_validated.setter
    def head_dress_type_validated(self, head_dress_type_validated):
        """Sets the head_dress_type_validated of this MetaAttributeEvent.


        :param head_dress_type_validated: The head_dress_type_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._head_dress_type_validated = head_dress_type_validated

    @property
    def head_dress_colour(self):
        """Gets the head_dress_colour of this MetaAttributeEvent.  # noqa: E501


        :return: The head_dress_colour of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._head_dress_colour

    @head_dress_colour.setter
    def head_dress_colour(self, head_dress_colour):
        """Sets the head_dress_colour of this MetaAttributeEvent.


        :param head_dress_colour: The head_dress_colour of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._head_dress_colour = head_dress_colour

    @property
    def head_dress_colour_conf(self):
        """Gets the head_dress_colour_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The head_dress_colour_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._head_dress_colour_conf

    @head_dress_colour_conf.setter
    def head_dress_colour_conf(self, head_dress_colour_conf):
        """Sets the head_dress_colour_conf of this MetaAttributeEvent.


        :param head_dress_colour_conf: The head_dress_colour_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._head_dress_colour_conf = head_dress_colour_conf

    @property
    def head_dress_colour_validated(self):
        """Gets the head_dress_colour_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The head_dress_colour_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._head_dress_colour_validated

    @head_dress_colour_validated.setter
    def head_dress_colour_validated(self, head_dress_colour_validated):
        """Sets the head_dress_colour_validated of this MetaAttributeEvent.


        :param head_dress_colour_validated: The head_dress_colour_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._head_dress_colour_validated = head_dress_colour_validated

    @property
    def wears_mask(self):
        """Gets the wears_mask of this MetaAttributeEvent.  # noqa: E501


        :return: The wears_mask of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._wears_mask

    @wears_mask.setter
    def wears_mask(self, wears_mask):
        """Sets the wears_mask of this MetaAttributeEvent.


        :param wears_mask: The wears_mask of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._wears_mask = wears_mask

    @property
    def wears_mask_conf(self):
        """Gets the wears_mask_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The wears_mask_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._wears_mask_conf

    @wears_mask_conf.setter
    def wears_mask_conf(self, wears_mask_conf):
        """Sets the wears_mask_conf of this MetaAttributeEvent.


        :param wears_mask_conf: The wears_mask_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._wears_mask_conf = wears_mask_conf

    @property
    def wears_mask_validated(self):
        """Gets the wears_mask_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The wears_mask_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._wears_mask_validated

    @wears_mask_validated.setter
    def wears_mask_validated(self, wears_mask_validated):
        """Sets the wears_mask_validated of this MetaAttributeEvent.


        :param wears_mask_validated: The wears_mask_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._wears_mask_validated = wears_mask_validated

    @property
    def mask_colour(self):
        """Gets the mask_colour of this MetaAttributeEvent.  # noqa: E501


        :return: The mask_colour of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._mask_colour

    @mask_colour.setter
    def mask_colour(self, mask_colour):
        """Sets the mask_colour of this MetaAttributeEvent.


        :param mask_colour: The mask_colour of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._mask_colour = mask_colour

    @property
    def mask_colour_conf(self):
        """Gets the mask_colour_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The mask_colour_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._mask_colour_conf

    @mask_colour_conf.setter
    def mask_colour_conf(self, mask_colour_conf):
        """Sets the mask_colour_conf of this MetaAttributeEvent.


        :param mask_colour_conf: The mask_colour_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._mask_colour_conf = mask_colour_conf

    @property
    def mask_colour_validated(self):
        """Gets the mask_colour_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The mask_colour_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._mask_colour_validated

    @mask_colour_validated.setter
    def mask_colour_validated(self, mask_colour_validated):
        """Sets the mask_colour_validated of this MetaAttributeEvent.


        :param mask_colour_validated: The mask_colour_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._mask_colour_validated = mask_colour_validated

    @property
    def bag_colour(self):
        """Gets the bag_colour of this MetaAttributeEvent.  # noqa: E501


        :return: The bag_colour of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._bag_colour

    @bag_colour.setter
    def bag_colour(self, bag_colour):
        """Sets the bag_colour of this MetaAttributeEvent.


        :param bag_colour: The bag_colour of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._bag_colour = bag_colour

    @property
    def bag_colour_conf(self):
        """Gets the bag_colour_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The bag_colour_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._bag_colour_conf

    @bag_colour_conf.setter
    def bag_colour_conf(self, bag_colour_conf):
        """Sets the bag_colour_conf of this MetaAttributeEvent.


        :param bag_colour_conf: The bag_colour_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._bag_colour_conf = bag_colour_conf

    @property
    def bag_colour_validated(self):
        """Gets the bag_colour_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The bag_colour_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._bag_colour_validated

    @bag_colour_validated.setter
    def bag_colour_validated(self, bag_colour_validated):
        """Sets the bag_colour_validated of this MetaAttributeEvent.


        :param bag_colour_validated: The bag_colour_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._bag_colour_validated = bag_colour_validated

    @property
    def bag_style(self):
        """Gets the bag_style of this MetaAttributeEvent.  # noqa: E501


        :return: The bag_style of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._bag_style

    @bag_style.setter
    def bag_style(self, bag_style):
        """Sets the bag_style of this MetaAttributeEvent.


        :param bag_style: The bag_style of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._bag_style = bag_style

    @property
    def bag_style_conf(self):
        """Gets the bag_style_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The bag_style_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._bag_style_conf

    @bag_style_conf.setter
    def bag_style_conf(self, bag_style_conf):
        """Sets the bag_style_conf of this MetaAttributeEvent.


        :param bag_style_conf: The bag_style_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._bag_style_conf = bag_style_conf

    @property
    def bag_style_validated(self):
        """Gets the bag_style_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The bag_style_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._bag_style_validated

    @bag_style_validated.setter
    def bag_style_validated(self, bag_style_validated):
        """Sets the bag_style_validated of this MetaAttributeEvent.


        :param bag_style_validated: The bag_style_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._bag_style_validated = bag_style_validated

    @property
    def face_recognised_person_id1(self):
        """Gets the face_recognised_person_id1 of this MetaAttributeEvent.  # noqa: E501


        :return: The face_recognised_person_id1 of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._face_recognised_person_id1

    @face_recognised_person_id1.setter
    def face_recognised_person_id1(self, face_recognised_person_id1):
        """Sets the face_recognised_person_id1 of this MetaAttributeEvent.


        :param face_recognised_person_id1: The face_recognised_person_id1 of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._face_recognised_person_id1 = face_recognised_person_id1

    @property
    def face_recognised_person_name1(self):
        """Gets the face_recognised_person_name1 of this MetaAttributeEvent.  # noqa: E501


        :return: The face_recognised_person_name1 of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._face_recognised_person_name1

    @face_recognised_person_name1.setter
    def face_recognised_person_name1(self, face_recognised_person_name1):
        """Sets the face_recognised_person_name1 of this MetaAttributeEvent.


        :param face_recognised_person_name1: The face_recognised_person_name1 of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._face_recognised_person_name1 = face_recognised_person_name1

    @property
    def face_recognised_person_id1_conf(self):
        """Gets the face_recognised_person_id1_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The face_recognised_person_id1_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._face_recognised_person_id1_conf

    @face_recognised_person_id1_conf.setter
    def face_recognised_person_id1_conf(self, face_recognised_person_id1_conf):
        """Sets the face_recognised_person_id1_conf of this MetaAttributeEvent.


        :param face_recognised_person_id1_conf: The face_recognised_person_id1_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._face_recognised_person_id1_conf = face_recognised_person_id1_conf

    @property
    def face_recognised_person_id1_validated(self):
        """Gets the face_recognised_person_id1_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The face_recognised_person_id1_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._face_recognised_person_id1_validated

    @face_recognised_person_id1_validated.setter
    def face_recognised_person_id1_validated(self, face_recognised_person_id1_validated):
        """Sets the face_recognised_person_id1_validated of this MetaAttributeEvent.


        :param face_recognised_person_id1_validated: The face_recognised_person_id1_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._face_recognised_person_id1_validated = face_recognised_person_id1_validated

    @property
    def face_recognised_person_id2(self):
        """Gets the face_recognised_person_id2 of this MetaAttributeEvent.  # noqa: E501


        :return: The face_recognised_person_id2 of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._face_recognised_person_id2

    @face_recognised_person_id2.setter
    def face_recognised_person_id2(self, face_recognised_person_id2):
        """Sets the face_recognised_person_id2 of this MetaAttributeEvent.


        :param face_recognised_person_id2: The face_recognised_person_id2 of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._face_recognised_person_id2 = face_recognised_person_id2

    @property
    def face_recognised_person_name2(self):
        """Gets the face_recognised_person_name2 of this MetaAttributeEvent.  # noqa: E501


        :return: The face_recognised_person_name2 of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._face_recognised_person_name2

    @face_recognised_person_name2.setter
    def face_recognised_person_name2(self, face_recognised_person_name2):
        """Sets the face_recognised_person_name2 of this MetaAttributeEvent.


        :param face_recognised_person_name2: The face_recognised_person_name2 of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._face_recognised_person_name2 = face_recognised_person_name2

    @property
    def face_recognised_person_id2_conf(self):
        """Gets the face_recognised_person_id2_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The face_recognised_person_id2_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._face_recognised_person_id2_conf

    @face_recognised_person_id2_conf.setter
    def face_recognised_person_id2_conf(self, face_recognised_person_id2_conf):
        """Sets the face_recognised_person_id2_conf of this MetaAttributeEvent.


        :param face_recognised_person_id2_conf: The face_recognised_person_id2_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._face_recognised_person_id2_conf = face_recognised_person_id2_conf

    @property
    def face_recognised_person_id2_validated(self):
        """Gets the face_recognised_person_id2_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The face_recognised_person_id2_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._face_recognised_person_id2_validated

    @face_recognised_person_id2_validated.setter
    def face_recognised_person_id2_validated(self, face_recognised_person_id2_validated):
        """Sets the face_recognised_person_id2_validated of this MetaAttributeEvent.


        :param face_recognised_person_id2_validated: The face_recognised_person_id2_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._face_recognised_person_id2_validated = face_recognised_person_id2_validated

    @property
    def vehicle_license_number(self):
        """Gets the vehicle_license_number of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_license_number of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_license_number

    @vehicle_license_number.setter
    def vehicle_license_number(self, vehicle_license_number):
        """Sets the vehicle_license_number of this MetaAttributeEvent.


        :param vehicle_license_number: The vehicle_license_number of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._vehicle_license_number = vehicle_license_number

    @property
    def vehicle_license_number_conf(self):
        """Gets the vehicle_license_number_conf of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_license_number_conf of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._vehicle_license_number_conf

    @vehicle_license_number_conf.setter
    def vehicle_license_number_conf(self, vehicle_license_number_conf):
        """Sets the vehicle_license_number_conf of this MetaAttributeEvent.


        :param vehicle_license_number_conf: The vehicle_license_number_conf of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._vehicle_license_number_conf = vehicle_license_number_conf

    @property
    def vehicle_license_number_validated(self):
        """Gets the vehicle_license_number_validated of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_license_number_validated of this MetaAttributeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._vehicle_license_number_validated

    @vehicle_license_number_validated.setter
    def vehicle_license_number_validated(self, vehicle_license_number_validated):
        """Sets the vehicle_license_number_validated of this MetaAttributeEvent.


        :param vehicle_license_number_validated: The vehicle_license_number_validated of this MetaAttributeEvent.  # noqa: E501
        :type: bool
        """

        self._vehicle_license_number_validated = vehicle_license_number_validated

    @property
    def vehicle_quality_factor(self):
        """Gets the vehicle_quality_factor of this MetaAttributeEvent.  # noqa: E501


        :return: The vehicle_quality_factor of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._vehicle_quality_factor

    @vehicle_quality_factor.setter
    def vehicle_quality_factor(self, vehicle_quality_factor):
        """Sets the vehicle_quality_factor of this MetaAttributeEvent.


        :param vehicle_quality_factor: The vehicle_quality_factor of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._vehicle_quality_factor = vehicle_quality_factor

    @property
    def human_quality_factor(self):
        """Gets the human_quality_factor of this MetaAttributeEvent.  # noqa: E501


        :return: The human_quality_factor of this MetaAttributeEvent.  # noqa: E501
        :rtype: float
        """
        return self._human_quality_factor

    @human_quality_factor.setter
    def human_quality_factor(self, human_quality_factor):
        """Sets the human_quality_factor of this MetaAttributeEvent.


        :param human_quality_factor: The human_quality_factor of this MetaAttributeEvent.  # noqa: E501
        :type: float
        """

        self._human_quality_factor = human_quality_factor

    @property
    def event_time(self):
        """Gets the event_time of this MetaAttributeEvent.  # noqa: E501


        :return: The event_time of this MetaAttributeEvent.  # noqa: E501
        :rtype: int
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this MetaAttributeEvent.


        :param event_time: The event_time of this MetaAttributeEvent.  # noqa: E501
        :type: int
        """

        self._event_time = event_time

    @property
    def channel_id(self):
        """Gets the channel_id of this MetaAttributeEvent.  # noqa: E501


        :return: The channel_id of this MetaAttributeEvent.  # noqa: E501
        :rtype: int
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this MetaAttributeEvent.


        :param channel_id: The channel_id of this MetaAttributeEvent.  # noqa: E501
        :type: int
        """

        self._channel_id = channel_id

    @property
    def app_id(self):
        """Gets the app_id of this MetaAttributeEvent.  # noqa: E501


        :return: The app_id of this MetaAttributeEvent.  # noqa: E501
        :rtype: int
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this MetaAttributeEvent.


        :param app_id: The app_id of this MetaAttributeEvent.  # noqa: E501
        :type: int
        """

        self._app_id = app_id

    @property
    def track_id(self):
        """Gets the track_id of this MetaAttributeEvent.  # noqa: E501


        :return: The track_id of this MetaAttributeEvent.  # noqa: E501
        :rtype: int
        """
        return self._track_id

    @track_id.setter
    def track_id(self, track_id):
        """Sets the track_id of this MetaAttributeEvent.


        :param track_id: The track_id of this MetaAttributeEvent.  # noqa: E501
        :type: int
        """

        self._track_id = track_id

    @property
    def unique_event_id(self):
        """Gets the unique_event_id of this MetaAttributeEvent.  # noqa: E501


        :return: The unique_event_id of this MetaAttributeEvent.  # noqa: E501
        :rtype: str
        """
        return self._unique_event_id

    @unique_event_id.setter
    def unique_event_id(self, unique_event_id):
        """Sets the unique_event_id of this MetaAttributeEvent.


        :param unique_event_id: The unique_event_id of this MetaAttributeEvent.  # noqa: E501
        :type: str
        """

        self._unique_event_id = unique_event_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetaAttributeEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaAttributeEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
