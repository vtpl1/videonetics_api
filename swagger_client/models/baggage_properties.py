# coding: utf-8

"""
    Engine api

    Engine APIs  # noqa: E501

    OpenAPI spec version: 1.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaggageProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tray_type': 'str',
        'bag_color': 'str',
        'material_type': 'str',
        'bag_type': 'str',
        'bag_position': 'str',
        'damage': 'str'
    }

    attribute_map = {
        'tray_type': 'trayType',
        'bag_color': 'bagColor',
        'material_type': 'materialType',
        'bag_type': 'bagType',
        'bag_position': 'bagPosition',
        'damage': 'damage'
    }

    def __init__(self, tray_type=None, bag_color=None, material_type=None, bag_type=None, bag_position=None, damage=None):  # noqa: E501
        """BaggageProperties - a model defined in Swagger"""  # noqa: E501
        self._tray_type = None
        self._bag_color = None
        self._material_type = None
        self._bag_type = None
        self._bag_position = None
        self._damage = None
        self.discriminator = None
        if tray_type is not None:
            self.tray_type = tray_type
        if bag_color is not None:
            self.bag_color = bag_color
        if material_type is not None:
            self.material_type = material_type
        if bag_type is not None:
            self.bag_type = bag_type
        if bag_position is not None:
            self.bag_position = bag_position
        if damage is not None:
            self.damage = damage

    @property
    def tray_type(self):
        """Gets the tray_type of this BaggageProperties.  # noqa: E501


        :return: The tray_type of this BaggageProperties.  # noqa: E501
        :rtype: str
        """
        return self._tray_type

    @tray_type.setter
    def tray_type(self, tray_type):
        """Sets the tray_type of this BaggageProperties.


        :param tray_type: The tray_type of this BaggageProperties.  # noqa: E501
        :type: str
        """

        self._tray_type = tray_type

    @property
    def bag_color(self):
        """Gets the bag_color of this BaggageProperties.  # noqa: E501


        :return: The bag_color of this BaggageProperties.  # noqa: E501
        :rtype: str
        """
        return self._bag_color

    @bag_color.setter
    def bag_color(self, bag_color):
        """Sets the bag_color of this BaggageProperties.


        :param bag_color: The bag_color of this BaggageProperties.  # noqa: E501
        :type: str
        """

        self._bag_color = bag_color

    @property
    def material_type(self):
        """Gets the material_type of this BaggageProperties.  # noqa: E501


        :return: The material_type of this BaggageProperties.  # noqa: E501
        :rtype: str
        """
        return self._material_type

    @material_type.setter
    def material_type(self, material_type):
        """Sets the material_type of this BaggageProperties.


        :param material_type: The material_type of this BaggageProperties.  # noqa: E501
        :type: str
        """

        self._material_type = material_type

    @property
    def bag_type(self):
        """Gets the bag_type of this BaggageProperties.  # noqa: E501


        :return: The bag_type of this BaggageProperties.  # noqa: E501
        :rtype: str
        """
        return self._bag_type

    @bag_type.setter
    def bag_type(self, bag_type):
        """Sets the bag_type of this BaggageProperties.


        :param bag_type: The bag_type of this BaggageProperties.  # noqa: E501
        :type: str
        """

        self._bag_type = bag_type

    @property
    def bag_position(self):
        """Gets the bag_position of this BaggageProperties.  # noqa: E501


        :return: The bag_position of this BaggageProperties.  # noqa: E501
        :rtype: str
        """
        return self._bag_position

    @bag_position.setter
    def bag_position(self, bag_position):
        """Sets the bag_position of this BaggageProperties.


        :param bag_position: The bag_position of this BaggageProperties.  # noqa: E501
        :type: str
        """

        self._bag_position = bag_position

    @property
    def damage(self):
        """Gets the damage of this BaggageProperties.  # noqa: E501


        :return: The damage of this BaggageProperties.  # noqa: E501
        :rtype: str
        """
        return self._damage

    @damage.setter
    def damage(self, damage):
        """Sets the damage of this BaggageProperties.


        :param damage: The damage of this BaggageProperties.  # noqa: E501
        :type: str
        """

        self._damage = damage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaggageProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaggageProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
