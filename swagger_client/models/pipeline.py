# coding: utf-8

"""
    Engine api

    Engine APIs  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Pipeline(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'updated': 'datetime',
        'created': 'datetime',
        'etag': 'str',
        'links': 'Links',
        'name': 'str',
        'description': 'str',
        'pre_process': 'PreProcess',
        'motion_detector': 'MotionDetector',
        'inferencer': 'Inferencer'
    }

    attribute_map = {
        'id': '_id',
        'updated': 'updated',
        'created': 'created',
        'etag': 'etag',
        'links': 'links',
        'name': 'name',
        'description': 'description',
        'pre_process': 'preProcess',
        'motion_detector': 'motionDetector',
        'inferencer': 'inferencer'
    }

    def __init__(self, id=None, updated=None, created=None, etag=None, links=None, name=None, description=None, pre_process=None, motion_detector=None, inferencer=None):  # noqa: E501
        """Pipeline - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._updated = None
        self._created = None
        self._etag = None
        self._links = None
        self._name = None
        self._description = None
        self._pre_process = None
        self._motion_detector = None
        self._inferencer = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if updated is not None:
            self.updated = updated
        if created is not None:
            self.created = created
        if etag is not None:
            self.etag = etag
        if links is not None:
            self.links = links
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if pre_process is not None:
            self.pre_process = pre_process
        if motion_detector is not None:
            self.motion_detector = motion_detector
        if inferencer is not None:
            self.inferencer = inferencer

    @property
    def id(self):
        """Gets the id of this Pipeline.  # noqa: E501


        :return: The id of this Pipeline.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Pipeline.


        :param id: The id of this Pipeline.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def updated(self):
        """Gets the updated of this Pipeline.  # noqa: E501


        :return: The updated of this Pipeline.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Pipeline.


        :param updated: The updated of this Pipeline.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def created(self):
        """Gets the created of this Pipeline.  # noqa: E501


        :return: The created of this Pipeline.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Pipeline.


        :param created: The created of this Pipeline.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def etag(self):
        """Gets the etag of this Pipeline.  # noqa: E501


        :return: The etag of this Pipeline.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Pipeline.


        :param etag: The etag of this Pipeline.  # noqa: E501
        :type: str
        """

        self._etag = etag

    @property
    def links(self):
        """Gets the links of this Pipeline.  # noqa: E501


        :return: The links of this Pipeline.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Pipeline.


        :param links: The links of this Pipeline.  # noqa: E501
        :type: Links
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this Pipeline.  # noqa: E501


        :return: The name of this Pipeline.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pipeline.


        :param name: The name of this Pipeline.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Pipeline.  # noqa: E501


        :return: The description of this Pipeline.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Pipeline.


        :param description: The description of this Pipeline.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def pre_process(self):
        """Gets the pre_process of this Pipeline.  # noqa: E501


        :return: The pre_process of this Pipeline.  # noqa: E501
        :rtype: PreProcess
        """
        return self._pre_process

    @pre_process.setter
    def pre_process(self, pre_process):
        """Sets the pre_process of this Pipeline.


        :param pre_process: The pre_process of this Pipeline.  # noqa: E501
        :type: PreProcess
        """

        self._pre_process = pre_process

    @property
    def motion_detector(self):
        """Gets the motion_detector of this Pipeline.  # noqa: E501


        :return: The motion_detector of this Pipeline.  # noqa: E501
        :rtype: MotionDetector
        """
        return self._motion_detector

    @motion_detector.setter
    def motion_detector(self, motion_detector):
        """Sets the motion_detector of this Pipeline.


        :param motion_detector: The motion_detector of this Pipeline.  # noqa: E501
        :type: MotionDetector
        """

        self._motion_detector = motion_detector

    @property
    def inferencer(self):
        """Gets the inferencer of this Pipeline.  # noqa: E501


        :return: The inferencer of this Pipeline.  # noqa: E501
        :rtype: Inferencer
        """
        return self._inferencer

    @inferencer.setter
    def inferencer(self, inferencer):
        """Sets the inferencer of this Pipeline.


        :param inferencer: The inferencer of this Pipeline.  # noqa: E501
        :type: Inferencer
        """

        self._inferencer = inferencer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pipeline, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pipeline):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
